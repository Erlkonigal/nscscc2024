// Generated by CIRCT firtool-1.62.0
// external module dist_mem

module btb(
  input         clock,
  input  [31:0] io_pc,
  output        io_branch,
  output [31:0] io_btarget,
  input         io_update,
                io_u_branch,
                io_u_type,
  input  [31:0] io_u_pc,
                io_u_target
);

  wire [47:0] _btb_dpo;
  reg  [1:0]  pht_0;
  reg  [1:0]  pht_1;
  reg  [1:0]  pht_2;
  reg  [1:0]  pht_3;
  reg  [1:0]  pht_4;
  reg  [1:0]  pht_5;
  reg  [1:0]  pht_6;
  reg  [1:0]  pht_7;
  reg  [1:0]  pht_8;
  reg  [1:0]  pht_9;
  reg  [1:0]  pht_10;
  reg  [1:0]  pht_11;
  reg  [1:0]  pht_12;
  reg  [1:0]  pht_13;
  reg  [1:0]  pht_14;
  reg  [1:0]  pht_15;
  reg  [1:0]  pht_16;
  reg  [1:0]  pht_17;
  reg  [1:0]  pht_18;
  reg  [1:0]  pht_19;
  reg  [1:0]  pht_20;
  reg  [1:0]  pht_21;
  reg  [1:0]  pht_22;
  reg  [1:0]  pht_23;
  reg  [1:0]  pht_24;
  reg  [1:0]  pht_25;
  reg  [1:0]  pht_26;
  reg  [1:0]  pht_27;
  reg  [1:0]  pht_28;
  reg  [1:0]  pht_29;
  reg  [1:0]  pht_30;
  reg  [1:0]  pht_31;
  reg  [1:0]  pht_32;
  reg  [1:0]  pht_33;
  reg  [1:0]  pht_34;
  reg  [1:0]  pht_35;
  reg  [1:0]  pht_36;
  reg  [1:0]  pht_37;
  reg  [1:0]  pht_38;
  reg  [1:0]  pht_39;
  reg  [1:0]  pht_40;
  reg  [1:0]  pht_41;
  reg  [1:0]  pht_42;
  reg  [1:0]  pht_43;
  reg  [1:0]  pht_44;
  reg  [1:0]  pht_45;
  reg  [1:0]  pht_46;
  reg  [1:0]  pht_47;
  reg  [1:0]  pht_48;
  reg  [1:0]  pht_49;
  reg  [1:0]  pht_50;
  reg  [1:0]  pht_51;
  reg  [1:0]  pht_52;
  reg  [1:0]  pht_53;
  reg  [1:0]  pht_54;
  reg  [1:0]  pht_55;
  reg  [1:0]  pht_56;
  reg  [1:0]  pht_57;
  reg  [1:0]  pht_58;
  reg  [1:0]  pht_59;
  reg  [1:0]  pht_60;
  reg  [1:0]  pht_61;
  reg  [1:0]  pht_62;
  reg  [1:0]  pht_63;
  reg  [1:0]  casez_tmp;
  always_comb begin
    casez (io_pc[7:2])
      6'b000000:
        casez_tmp = pht_0;
      6'b000001:
        casez_tmp = pht_1;
      6'b000010:
        casez_tmp = pht_2;
      6'b000011:
        casez_tmp = pht_3;
      6'b000100:
        casez_tmp = pht_4;
      6'b000101:
        casez_tmp = pht_5;
      6'b000110:
        casez_tmp = pht_6;
      6'b000111:
        casez_tmp = pht_7;
      6'b001000:
        casez_tmp = pht_8;
      6'b001001:
        casez_tmp = pht_9;
      6'b001010:
        casez_tmp = pht_10;
      6'b001011:
        casez_tmp = pht_11;
      6'b001100:
        casez_tmp = pht_12;
      6'b001101:
        casez_tmp = pht_13;
      6'b001110:
        casez_tmp = pht_14;
      6'b001111:
        casez_tmp = pht_15;
      6'b010000:
        casez_tmp = pht_16;
      6'b010001:
        casez_tmp = pht_17;
      6'b010010:
        casez_tmp = pht_18;
      6'b010011:
        casez_tmp = pht_19;
      6'b010100:
        casez_tmp = pht_20;
      6'b010101:
        casez_tmp = pht_21;
      6'b010110:
        casez_tmp = pht_22;
      6'b010111:
        casez_tmp = pht_23;
      6'b011000:
        casez_tmp = pht_24;
      6'b011001:
        casez_tmp = pht_25;
      6'b011010:
        casez_tmp = pht_26;
      6'b011011:
        casez_tmp = pht_27;
      6'b011100:
        casez_tmp = pht_28;
      6'b011101:
        casez_tmp = pht_29;
      6'b011110:
        casez_tmp = pht_30;
      6'b011111:
        casez_tmp = pht_31;
      6'b100000:
        casez_tmp = pht_32;
      6'b100001:
        casez_tmp = pht_33;
      6'b100010:
        casez_tmp = pht_34;
      6'b100011:
        casez_tmp = pht_35;
      6'b100100:
        casez_tmp = pht_36;
      6'b100101:
        casez_tmp = pht_37;
      6'b100110:
        casez_tmp = pht_38;
      6'b100111:
        casez_tmp = pht_39;
      6'b101000:
        casez_tmp = pht_40;
      6'b101001:
        casez_tmp = pht_41;
      6'b101010:
        casez_tmp = pht_42;
      6'b101011:
        casez_tmp = pht_43;
      6'b101100:
        casez_tmp = pht_44;
      6'b101101:
        casez_tmp = pht_45;
      6'b101110:
        casez_tmp = pht_46;
      6'b101111:
        casez_tmp = pht_47;
      6'b110000:
        casez_tmp = pht_48;
      6'b110001:
        casez_tmp = pht_49;
      6'b110010:
        casez_tmp = pht_50;
      6'b110011:
        casez_tmp = pht_51;
      6'b110100:
        casez_tmp = pht_52;
      6'b110101:
        casez_tmp = pht_53;
      6'b110110:
        casez_tmp = pht_54;
      6'b110111:
        casez_tmp = pht_55;
      6'b111000:
        casez_tmp = pht_56;
      6'b111001:
        casez_tmp = pht_57;
      6'b111010:
        casez_tmp = pht_58;
      6'b111011:
        casez_tmp = pht_59;
      6'b111100:
        casez_tmp = pht_60;
      6'b111101:
        casez_tmp = pht_61;
      6'b111110:
        casez_tmp = pht_62;
      default:
        casez_tmp = pht_63;
    endcase
  end // always_comb
  reg  [1:0]  casez_tmp_0;
  always_comb begin
    casez (io_u_pc[7:2])
      6'b000000:
        casez_tmp_0 = pht_0;
      6'b000001:
        casez_tmp_0 = pht_1;
      6'b000010:
        casez_tmp_0 = pht_2;
      6'b000011:
        casez_tmp_0 = pht_3;
      6'b000100:
        casez_tmp_0 = pht_4;
      6'b000101:
        casez_tmp_0 = pht_5;
      6'b000110:
        casez_tmp_0 = pht_6;
      6'b000111:
        casez_tmp_0 = pht_7;
      6'b001000:
        casez_tmp_0 = pht_8;
      6'b001001:
        casez_tmp_0 = pht_9;
      6'b001010:
        casez_tmp_0 = pht_10;
      6'b001011:
        casez_tmp_0 = pht_11;
      6'b001100:
        casez_tmp_0 = pht_12;
      6'b001101:
        casez_tmp_0 = pht_13;
      6'b001110:
        casez_tmp_0 = pht_14;
      6'b001111:
        casez_tmp_0 = pht_15;
      6'b010000:
        casez_tmp_0 = pht_16;
      6'b010001:
        casez_tmp_0 = pht_17;
      6'b010010:
        casez_tmp_0 = pht_18;
      6'b010011:
        casez_tmp_0 = pht_19;
      6'b010100:
        casez_tmp_0 = pht_20;
      6'b010101:
        casez_tmp_0 = pht_21;
      6'b010110:
        casez_tmp_0 = pht_22;
      6'b010111:
        casez_tmp_0 = pht_23;
      6'b011000:
        casez_tmp_0 = pht_24;
      6'b011001:
        casez_tmp_0 = pht_25;
      6'b011010:
        casez_tmp_0 = pht_26;
      6'b011011:
        casez_tmp_0 = pht_27;
      6'b011100:
        casez_tmp_0 = pht_28;
      6'b011101:
        casez_tmp_0 = pht_29;
      6'b011110:
        casez_tmp_0 = pht_30;
      6'b011111:
        casez_tmp_0 = pht_31;
      6'b100000:
        casez_tmp_0 = pht_32;
      6'b100001:
        casez_tmp_0 = pht_33;
      6'b100010:
        casez_tmp_0 = pht_34;
      6'b100011:
        casez_tmp_0 = pht_35;
      6'b100100:
        casez_tmp_0 = pht_36;
      6'b100101:
        casez_tmp_0 = pht_37;
      6'b100110:
        casez_tmp_0 = pht_38;
      6'b100111:
        casez_tmp_0 = pht_39;
      6'b101000:
        casez_tmp_0 = pht_40;
      6'b101001:
        casez_tmp_0 = pht_41;
      6'b101010:
        casez_tmp_0 = pht_42;
      6'b101011:
        casez_tmp_0 = pht_43;
      6'b101100:
        casez_tmp_0 = pht_44;
      6'b101101:
        casez_tmp_0 = pht_45;
      6'b101110:
        casez_tmp_0 = pht_46;
      6'b101111:
        casez_tmp_0 = pht_47;
      6'b110000:
        casez_tmp_0 = pht_48;
      6'b110001:
        casez_tmp_0 = pht_49;
      6'b110010:
        casez_tmp_0 = pht_50;
      6'b110011:
        casez_tmp_0 = pht_51;
      6'b110100:
        casez_tmp_0 = pht_52;
      6'b110101:
        casez_tmp_0 = pht_53;
      6'b110110:
        casez_tmp_0 = pht_54;
      6'b110111:
        casez_tmp_0 = pht_55;
      6'b111000:
        casez_tmp_0 = pht_56;
      6'b111001:
        casez_tmp_0 = pht_57;
      6'b111010:
        casez_tmp_0 = pht_58;
      6'b111011:
        casez_tmp_0 = pht_59;
      6'b111100:
        casez_tmp_0 = pht_60;
      6'b111101:
        casez_tmp_0 = pht_61;
      6'b111110:
        casez_tmp_0 = pht_62;
      default:
        casez_tmp_0 = pht_63;
    endcase
  end // always_comb
  wire        _GEN = io_update & io_u_type;
  wire        _pht_T_2 = casez_tmp_0 == 2'h1;
  wire        _GEN_0 = (&casez_tmp_0) | casez_tmp_0 == 2'h2;
  wire [1:0]  _GEN_1 = {1'h0, casez_tmp_0 == 2'h2};
  always @(posedge clock) begin
    if (_GEN & io_u_pc[7:2] == 6'h0) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_0 <= 2'h3;
        else if (_pht_T_2)
          pht_0 <= 2'h2;
        else
          pht_0 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_0 <= 2'h2;
      else
        pht_0 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_1 <= 2'h3;
        else if (_pht_T_2)
          pht_1 <= 2'h2;
        else
          pht_1 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_1 <= 2'h2;
      else
        pht_1 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_2 <= 2'h3;
        else if (_pht_T_2)
          pht_2 <= 2'h2;
        else
          pht_2 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_2 <= 2'h2;
      else
        pht_2 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_3 <= 2'h3;
        else if (_pht_T_2)
          pht_3 <= 2'h2;
        else
          pht_3 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_3 <= 2'h2;
      else
        pht_3 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h4) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_4 <= 2'h3;
        else if (_pht_T_2)
          pht_4 <= 2'h2;
        else
          pht_4 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_4 <= 2'h2;
      else
        pht_4 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h5) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_5 <= 2'h3;
        else if (_pht_T_2)
          pht_5 <= 2'h2;
        else
          pht_5 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_5 <= 2'h2;
      else
        pht_5 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h6) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_6 <= 2'h3;
        else if (_pht_T_2)
          pht_6 <= 2'h2;
        else
          pht_6 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_6 <= 2'h2;
      else
        pht_6 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h7) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_7 <= 2'h3;
        else if (_pht_T_2)
          pht_7 <= 2'h2;
        else
          pht_7 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_7 <= 2'h2;
      else
        pht_7 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h8) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_8 <= 2'h3;
        else if (_pht_T_2)
          pht_8 <= 2'h2;
        else
          pht_8 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_8 <= 2'h2;
      else
        pht_8 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h9) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_9 <= 2'h3;
        else if (_pht_T_2)
          pht_9 <= 2'h2;
        else
          pht_9 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_9 <= 2'h2;
      else
        pht_9 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hA) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_10 <= 2'h3;
        else if (_pht_T_2)
          pht_10 <= 2'h2;
        else
          pht_10 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_10 <= 2'h2;
      else
        pht_10 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hB) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_11 <= 2'h3;
        else if (_pht_T_2)
          pht_11 <= 2'h2;
        else
          pht_11 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_11 <= 2'h2;
      else
        pht_11 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hC) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_12 <= 2'h3;
        else if (_pht_T_2)
          pht_12 <= 2'h2;
        else
          pht_12 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_12 <= 2'h2;
      else
        pht_12 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hD) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_13 <= 2'h3;
        else if (_pht_T_2)
          pht_13 <= 2'h2;
        else
          pht_13 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_13 <= 2'h2;
      else
        pht_13 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hE) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_14 <= 2'h3;
        else if (_pht_T_2)
          pht_14 <= 2'h2;
        else
          pht_14 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_14 <= 2'h2;
      else
        pht_14 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'hF) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_15 <= 2'h3;
        else if (_pht_T_2)
          pht_15 <= 2'h2;
        else
          pht_15 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_15 <= 2'h2;
      else
        pht_15 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h10) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_16 <= 2'h3;
        else if (_pht_T_2)
          pht_16 <= 2'h2;
        else
          pht_16 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_16 <= 2'h2;
      else
        pht_16 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h11) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_17 <= 2'h3;
        else if (_pht_T_2)
          pht_17 <= 2'h2;
        else
          pht_17 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_17 <= 2'h2;
      else
        pht_17 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h12) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_18 <= 2'h3;
        else if (_pht_T_2)
          pht_18 <= 2'h2;
        else
          pht_18 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_18 <= 2'h2;
      else
        pht_18 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h13) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_19 <= 2'h3;
        else if (_pht_T_2)
          pht_19 <= 2'h2;
        else
          pht_19 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_19 <= 2'h2;
      else
        pht_19 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h14) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_20 <= 2'h3;
        else if (_pht_T_2)
          pht_20 <= 2'h2;
        else
          pht_20 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_20 <= 2'h2;
      else
        pht_20 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h15) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_21 <= 2'h3;
        else if (_pht_T_2)
          pht_21 <= 2'h2;
        else
          pht_21 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_21 <= 2'h2;
      else
        pht_21 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h16) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_22 <= 2'h3;
        else if (_pht_T_2)
          pht_22 <= 2'h2;
        else
          pht_22 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_22 <= 2'h2;
      else
        pht_22 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h17) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_23 <= 2'h3;
        else if (_pht_T_2)
          pht_23 <= 2'h2;
        else
          pht_23 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_23 <= 2'h2;
      else
        pht_23 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h18) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_24 <= 2'h3;
        else if (_pht_T_2)
          pht_24 <= 2'h2;
        else
          pht_24 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_24 <= 2'h2;
      else
        pht_24 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h19) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_25 <= 2'h3;
        else if (_pht_T_2)
          pht_25 <= 2'h2;
        else
          pht_25 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_25 <= 2'h2;
      else
        pht_25 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1A) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_26 <= 2'h3;
        else if (_pht_T_2)
          pht_26 <= 2'h2;
        else
          pht_26 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_26 <= 2'h2;
      else
        pht_26 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1B) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_27 <= 2'h3;
        else if (_pht_T_2)
          pht_27 <= 2'h2;
        else
          pht_27 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_27 <= 2'h2;
      else
        pht_27 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1C) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_28 <= 2'h3;
        else if (_pht_T_2)
          pht_28 <= 2'h2;
        else
          pht_28 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_28 <= 2'h2;
      else
        pht_28 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1D) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_29 <= 2'h3;
        else if (_pht_T_2)
          pht_29 <= 2'h2;
        else
          pht_29 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_29 <= 2'h2;
      else
        pht_29 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1E) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_30 <= 2'h3;
        else if (_pht_T_2)
          pht_30 <= 2'h2;
        else
          pht_30 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_30 <= 2'h2;
      else
        pht_30 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h1F) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_31 <= 2'h3;
        else if (_pht_T_2)
          pht_31 <= 2'h2;
        else
          pht_31 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_31 <= 2'h2;
      else
        pht_31 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h20) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_32 <= 2'h3;
        else if (_pht_T_2)
          pht_32 <= 2'h2;
        else
          pht_32 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_32 <= 2'h2;
      else
        pht_32 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h21) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_33 <= 2'h3;
        else if (_pht_T_2)
          pht_33 <= 2'h2;
        else
          pht_33 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_33 <= 2'h2;
      else
        pht_33 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h22) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_34 <= 2'h3;
        else if (_pht_T_2)
          pht_34 <= 2'h2;
        else
          pht_34 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_34 <= 2'h2;
      else
        pht_34 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h23) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_35 <= 2'h3;
        else if (_pht_T_2)
          pht_35 <= 2'h2;
        else
          pht_35 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_35 <= 2'h2;
      else
        pht_35 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h24) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_36 <= 2'h3;
        else if (_pht_T_2)
          pht_36 <= 2'h2;
        else
          pht_36 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_36 <= 2'h2;
      else
        pht_36 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h25) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_37 <= 2'h3;
        else if (_pht_T_2)
          pht_37 <= 2'h2;
        else
          pht_37 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_37 <= 2'h2;
      else
        pht_37 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h26) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_38 <= 2'h3;
        else if (_pht_T_2)
          pht_38 <= 2'h2;
        else
          pht_38 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_38 <= 2'h2;
      else
        pht_38 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h27) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_39 <= 2'h3;
        else if (_pht_T_2)
          pht_39 <= 2'h2;
        else
          pht_39 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_39 <= 2'h2;
      else
        pht_39 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h28) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_40 <= 2'h3;
        else if (_pht_T_2)
          pht_40 <= 2'h2;
        else
          pht_40 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_40 <= 2'h2;
      else
        pht_40 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h29) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_41 <= 2'h3;
        else if (_pht_T_2)
          pht_41 <= 2'h2;
        else
          pht_41 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_41 <= 2'h2;
      else
        pht_41 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2A) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_42 <= 2'h3;
        else if (_pht_T_2)
          pht_42 <= 2'h2;
        else
          pht_42 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_42 <= 2'h2;
      else
        pht_42 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2B) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_43 <= 2'h3;
        else if (_pht_T_2)
          pht_43 <= 2'h2;
        else
          pht_43 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_43 <= 2'h2;
      else
        pht_43 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2C) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_44 <= 2'h3;
        else if (_pht_T_2)
          pht_44 <= 2'h2;
        else
          pht_44 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_44 <= 2'h2;
      else
        pht_44 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2D) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_45 <= 2'h3;
        else if (_pht_T_2)
          pht_45 <= 2'h2;
        else
          pht_45 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_45 <= 2'h2;
      else
        pht_45 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2E) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_46 <= 2'h3;
        else if (_pht_T_2)
          pht_46 <= 2'h2;
        else
          pht_46 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_46 <= 2'h2;
      else
        pht_46 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h2F) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_47 <= 2'h3;
        else if (_pht_T_2)
          pht_47 <= 2'h2;
        else
          pht_47 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_47 <= 2'h2;
      else
        pht_47 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h30) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_48 <= 2'h3;
        else if (_pht_T_2)
          pht_48 <= 2'h2;
        else
          pht_48 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_48 <= 2'h2;
      else
        pht_48 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h31) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_49 <= 2'h3;
        else if (_pht_T_2)
          pht_49 <= 2'h2;
        else
          pht_49 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_49 <= 2'h2;
      else
        pht_49 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h32) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_50 <= 2'h3;
        else if (_pht_T_2)
          pht_50 <= 2'h2;
        else
          pht_50 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_50 <= 2'h2;
      else
        pht_50 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h33) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_51 <= 2'h3;
        else if (_pht_T_2)
          pht_51 <= 2'h2;
        else
          pht_51 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_51 <= 2'h2;
      else
        pht_51 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h34) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_52 <= 2'h3;
        else if (_pht_T_2)
          pht_52 <= 2'h2;
        else
          pht_52 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_52 <= 2'h2;
      else
        pht_52 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h35) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_53 <= 2'h3;
        else if (_pht_T_2)
          pht_53 <= 2'h2;
        else
          pht_53 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_53 <= 2'h2;
      else
        pht_53 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h36) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_54 <= 2'h3;
        else if (_pht_T_2)
          pht_54 <= 2'h2;
        else
          pht_54 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_54 <= 2'h2;
      else
        pht_54 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h37) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_55 <= 2'h3;
        else if (_pht_T_2)
          pht_55 <= 2'h2;
        else
          pht_55 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_55 <= 2'h2;
      else
        pht_55 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h38) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_56 <= 2'h3;
        else if (_pht_T_2)
          pht_56 <= 2'h2;
        else
          pht_56 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_56 <= 2'h2;
      else
        pht_56 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h39) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_57 <= 2'h3;
        else if (_pht_T_2)
          pht_57 <= 2'h2;
        else
          pht_57 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_57 <= 2'h2;
      else
        pht_57 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3A) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_58 <= 2'h3;
        else if (_pht_T_2)
          pht_58 <= 2'h2;
        else
          pht_58 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_58 <= 2'h2;
      else
        pht_58 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3B) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_59 <= 2'h3;
        else if (_pht_T_2)
          pht_59 <= 2'h2;
        else
          pht_59 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_59 <= 2'h2;
      else
        pht_59 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3C) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_60 <= 2'h3;
        else if (_pht_T_2)
          pht_60 <= 2'h2;
        else
          pht_60 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_60 <= 2'h2;
      else
        pht_60 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3D) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_61 <= 2'h3;
        else if (_pht_T_2)
          pht_61 <= 2'h2;
        else
          pht_61 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_61 <= 2'h2;
      else
        pht_61 <= _GEN_1;
    end
    if (_GEN & io_u_pc[7:2] == 6'h3E) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_62 <= 2'h3;
        else if (_pht_T_2)
          pht_62 <= 2'h2;
        else
          pht_62 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_62 <= 2'h2;
      else
        pht_62 <= _GEN_1;
    end
    if (_GEN & (&(io_u_pc[7:2]))) begin
      if (io_u_branch) begin
        if (_GEN_0)
          pht_63 <= 2'h3;
        else if (_pht_T_2)
          pht_63 <= 2'h2;
        else
          pht_63 <= 2'h1;
      end
      else if (&casez_tmp_0)
        pht_63 <= 2'h2;
      else
        pht_63 <= _GEN_1;
    end
  end // always @(posedge)
  dist_mem btb (
    .clk  (clock),
    .a    (io_u_pc[7:2]),
    .d    ({io_update, io_u_type, io_u_pc[21:8], io_u_target}),
    .we   (io_update),
    .spo  (/* unused */),
    .dpra (io_pc[7:2]),
    .dpo  (_btb_dpo)
  );
  assign io_branch =
    _btb_dpo[47] & (io_pc[21:8] ^ _btb_dpo[45:32]) == 14'h0
    & (_btb_dpo[46] & casez_tmp[1] | ~(_btb_dpo[46]));
  assign io_btarget = _btb_dpo[31:0];
endmodule

module icache(
  input         clock,
  input  [31:0] io_pc,
  output        io_valid,
  output [31:0] io_inst,
  input         io_update,
  input  [31:0] io_u_pc,
                io_u_inst
);

  wire [47:0] _cache_dpo;
  dist_mem cache (
    .clk  (clock),
    .a    (io_u_pc[7:2]),
    .d    ({1'h0, io_update, io_u_pc[21:8], io_u_inst}),
    .we   (io_update),
    .spo  (/* unused */),
    .dpra (io_pc[7:2]),
    .dpo  (_cache_dpo)
  );
  assign io_valid = _cache_dpo[46] & (io_pc[21:8] ^ _cache_dpo[45:32]) == 14'h0;
  assign io_inst = _cache_dpo[31:0];
endmodule

module ifu(
  input         clock,
                reset,
  input  [31:0] io_base_in_bits_data_out,
  input         io_base_out_ready,
  output        io_base_out_valid,
  output [31:0] io_base_out_bits_addr,
  input         io_next_ready,
  output        io_next_valid,
  output [31:0] io_next_bits_pc,
                io_next_bits_npc,
                io_next_bits_inst,
  input         io_flush,
                io_update,
                io_u_branch,
                io_u_type,
  input  [31:0] io_u_pc,
                io_u_target,
                io_nextPC
);

  wire        _icache_io_valid;
  wire [31:0] _icache_io_inst;
  wire        _btb_io_branch;
  wire [31:0] _btb_io_btarget;
  reg  [31:0] pc;
  reg         state;
  wire        valid = io_next_ready & (io_base_out_ready & state | _icache_io_valid);
  wire [31:0] _npc_T = pc + 32'h4;
  always @(posedge clock) begin
    if (reset) begin
      pc <= 32'h80000000;
      state <= 1'h0;
    end
    else begin
      if (io_flush)
        pc <= io_nextPC;
      else if (valid) begin
        if (_btb_io_branch)
          pc <= _btb_io_btarget;
        else
          pc <= _npc_T;
      end
      state <=
        ~io_flush
        & (state
             ? ~(io_next_ready | ~io_base_out_ready) & state
             : io_base_out_ready & ~_icache_io_valid | state);
    end
  end // always @(posedge)
  btb btb (
    .clock       (clock),
    .io_pc       (pc),
    .io_branch   (_btb_io_branch),
    .io_btarget  (_btb_io_btarget),
    .io_update   (io_update),
    .io_u_branch (io_u_branch),
    .io_u_type   (io_u_type),
    .io_u_pc     (io_u_pc),
    .io_u_target (io_u_target)
  );
  icache icache (
    .clock     (clock),
    .io_pc     (pc),
    .io_valid  (_icache_io_valid),
    .io_inst   (_icache_io_inst),
    .io_update (state & io_base_out_ready),
    .io_u_pc   (pc),
    .io_u_inst (io_base_in_bits_data_out)
  );
  assign io_base_out_valid = io_base_out_ready;
  assign io_base_out_bits_addr = pc;
  assign io_next_valid = valid;
  assign io_next_bits_pc = pc;
  assign io_next_bits_npc =
    io_flush ? io_nextPC : valid ? (_btb_io_branch ? _btb_io_btarget : _npc_T) : pc;
  assign io_next_bits_inst =
    _icache_io_valid ? _icache_io_inst : io_base_in_bits_data_out;
endmodule

module buffer(
  input         clock,
                reset,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [31:0] io_prev_bits_pc,
                io_prev_bits_npc,
                io_prev_bits_inst,
  input         io_next_ready,
  output        io_next_valid,
  output [31:0] io_next_bits_pc,
                io_next_bits_npc,
                io_next_bits_inst,
  input         io_stall,
                io_flush
);

  reg         state;
  reg  [31:0] regs_pc;
  reg  [31:0] regs_npc;
  reg  [31:0] regs_inst;
  wire        _GEN = state & ~io_next_ready | io_stall;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else
      state <= ~io_flush & (_GEN ? state : io_prev_valid);
    if (io_flush | _GEN | ~io_prev_valid) begin
    end
    else begin
      regs_pc <= io_prev_bits_pc;
      regs_npc <= io_prev_bits_npc;
      regs_inst <= io_prev_bits_inst;
    end
  end // always @(posedge)
  assign io_prev_ready = ~io_flush & ~_GEN;
  assign io_next_valid = state;
  assign io_next_bits_pc = regs_pc;
  assign io_next_bits_npc = regs_npc;
  assign io_next_bits_inst = regs_inst;
endmodule

module ImmGen(
  input  [25:0] io_inst26,
  input  [3:0]  io_immType,
  output [31:0] io_Imm
);

  assign io_Imm =
    io_immType == 4'h8
      ? {{4{io_inst26[9]}}, io_inst26[9:0], io_inst26[25:10], 2'h0}
      : io_immType == 4'h7
          ? {{9{io_inst26[4]}}, io_inst26[4:0], io_inst26[25:10], 2'h0}
          : io_immType == 4'h6
              ? {io_inst26[24:5], 12'h0}
              : io_immType == 4'h5
                  ? {{14{io_inst26[25]}}, io_inst26[25:10], 2'h0}
                  : io_immType == 4'h4
                      ? {{16{io_inst26[23]}}, io_inst26[23:10], 2'h0}
                      : io_immType == 4'h3
                          ? {20'h0, io_inst26[21:10]}
                          : io_immType == 4'h2
                              ? {{20{io_inst26[21]}}, io_inst26[21:10]}
                              : io_immType == 4'h1
                                  ? {{24{io_inst26[17]}}, io_inst26[17:10]}
                                  : io_immType == 4'h0
                                      ? {27'h0, io_inst26[14:10]}
                                      : 32'h0;
endmodule

module RegFile(
  input         clock,
  input  [4:0]  io_rd,
                io_rj,
                io_rk,
  output [31:0] io_rd_data,
                io_rj_data,
                io_rk_data,
  input         io_wen,
  input  [4:0]  io_waddr,
  input  [31:0] io_wdata
);

  reg [31:0] reg_0;
  reg [31:0] reg_1;
  reg [31:0] reg_2;
  reg [31:0] reg_3;
  reg [31:0] reg_4;
  reg [31:0] reg_5;
  reg [31:0] reg_6;
  reg [31:0] reg_7;
  reg [31:0] reg_8;
  reg [31:0] reg_9;
  reg [31:0] reg_10;
  reg [31:0] reg_11;
  reg [31:0] reg_12;
  reg [31:0] reg_13;
  reg [31:0] reg_14;
  reg [31:0] reg_15;
  reg [31:0] reg_16;
  reg [31:0] reg_17;
  reg [31:0] reg_18;
  reg [31:0] reg_19;
  reg [31:0] reg_20;
  reg [31:0] reg_21;
  reg [31:0] reg_22;
  reg [31:0] reg_23;
  reg [31:0] reg_24;
  reg [31:0] reg_25;
  reg [31:0] reg_26;
  reg [31:0] reg_27;
  reg [31:0] reg_28;
  reg [31:0] reg_29;
  reg [31:0] reg_30;
  reg [31:0] reg_31;
  reg [31:0] casez_tmp;
  always_comb begin
    casez (io_rd)
      5'b00000:
        casez_tmp = reg_0;
      5'b00001:
        casez_tmp = reg_1;
      5'b00010:
        casez_tmp = reg_2;
      5'b00011:
        casez_tmp = reg_3;
      5'b00100:
        casez_tmp = reg_4;
      5'b00101:
        casez_tmp = reg_5;
      5'b00110:
        casez_tmp = reg_6;
      5'b00111:
        casez_tmp = reg_7;
      5'b01000:
        casez_tmp = reg_8;
      5'b01001:
        casez_tmp = reg_9;
      5'b01010:
        casez_tmp = reg_10;
      5'b01011:
        casez_tmp = reg_11;
      5'b01100:
        casez_tmp = reg_12;
      5'b01101:
        casez_tmp = reg_13;
      5'b01110:
        casez_tmp = reg_14;
      5'b01111:
        casez_tmp = reg_15;
      5'b10000:
        casez_tmp = reg_16;
      5'b10001:
        casez_tmp = reg_17;
      5'b10010:
        casez_tmp = reg_18;
      5'b10011:
        casez_tmp = reg_19;
      5'b10100:
        casez_tmp = reg_20;
      5'b10101:
        casez_tmp = reg_21;
      5'b10110:
        casez_tmp = reg_22;
      5'b10111:
        casez_tmp = reg_23;
      5'b11000:
        casez_tmp = reg_24;
      5'b11001:
        casez_tmp = reg_25;
      5'b11010:
        casez_tmp = reg_26;
      5'b11011:
        casez_tmp = reg_27;
      5'b11100:
        casez_tmp = reg_28;
      5'b11101:
        casez_tmp = reg_29;
      5'b11110:
        casez_tmp = reg_30;
      default:
        casez_tmp = reg_31;
    endcase
  end // always_comb
  reg [31:0] casez_tmp_0;
  always_comb begin
    casez (io_rj)
      5'b00000:
        casez_tmp_0 = reg_0;
      5'b00001:
        casez_tmp_0 = reg_1;
      5'b00010:
        casez_tmp_0 = reg_2;
      5'b00011:
        casez_tmp_0 = reg_3;
      5'b00100:
        casez_tmp_0 = reg_4;
      5'b00101:
        casez_tmp_0 = reg_5;
      5'b00110:
        casez_tmp_0 = reg_6;
      5'b00111:
        casez_tmp_0 = reg_7;
      5'b01000:
        casez_tmp_0 = reg_8;
      5'b01001:
        casez_tmp_0 = reg_9;
      5'b01010:
        casez_tmp_0 = reg_10;
      5'b01011:
        casez_tmp_0 = reg_11;
      5'b01100:
        casez_tmp_0 = reg_12;
      5'b01101:
        casez_tmp_0 = reg_13;
      5'b01110:
        casez_tmp_0 = reg_14;
      5'b01111:
        casez_tmp_0 = reg_15;
      5'b10000:
        casez_tmp_0 = reg_16;
      5'b10001:
        casez_tmp_0 = reg_17;
      5'b10010:
        casez_tmp_0 = reg_18;
      5'b10011:
        casez_tmp_0 = reg_19;
      5'b10100:
        casez_tmp_0 = reg_20;
      5'b10101:
        casez_tmp_0 = reg_21;
      5'b10110:
        casez_tmp_0 = reg_22;
      5'b10111:
        casez_tmp_0 = reg_23;
      5'b11000:
        casez_tmp_0 = reg_24;
      5'b11001:
        casez_tmp_0 = reg_25;
      5'b11010:
        casez_tmp_0 = reg_26;
      5'b11011:
        casez_tmp_0 = reg_27;
      5'b11100:
        casez_tmp_0 = reg_28;
      5'b11101:
        casez_tmp_0 = reg_29;
      5'b11110:
        casez_tmp_0 = reg_30;
      default:
        casez_tmp_0 = reg_31;
    endcase
  end // always_comb
  reg [31:0] casez_tmp_1;
  always_comb begin
    casez (io_rk)
      5'b00000:
        casez_tmp_1 = reg_0;
      5'b00001:
        casez_tmp_1 = reg_1;
      5'b00010:
        casez_tmp_1 = reg_2;
      5'b00011:
        casez_tmp_1 = reg_3;
      5'b00100:
        casez_tmp_1 = reg_4;
      5'b00101:
        casez_tmp_1 = reg_5;
      5'b00110:
        casez_tmp_1 = reg_6;
      5'b00111:
        casez_tmp_1 = reg_7;
      5'b01000:
        casez_tmp_1 = reg_8;
      5'b01001:
        casez_tmp_1 = reg_9;
      5'b01010:
        casez_tmp_1 = reg_10;
      5'b01011:
        casez_tmp_1 = reg_11;
      5'b01100:
        casez_tmp_1 = reg_12;
      5'b01101:
        casez_tmp_1 = reg_13;
      5'b01110:
        casez_tmp_1 = reg_14;
      5'b01111:
        casez_tmp_1 = reg_15;
      5'b10000:
        casez_tmp_1 = reg_16;
      5'b10001:
        casez_tmp_1 = reg_17;
      5'b10010:
        casez_tmp_1 = reg_18;
      5'b10011:
        casez_tmp_1 = reg_19;
      5'b10100:
        casez_tmp_1 = reg_20;
      5'b10101:
        casez_tmp_1 = reg_21;
      5'b10110:
        casez_tmp_1 = reg_22;
      5'b10111:
        casez_tmp_1 = reg_23;
      5'b11000:
        casez_tmp_1 = reg_24;
      5'b11001:
        casez_tmp_1 = reg_25;
      5'b11010:
        casez_tmp_1 = reg_26;
      5'b11011:
        casez_tmp_1 = reg_27;
      5'b11100:
        casez_tmp_1 = reg_28;
      5'b11101:
        casez_tmp_1 = reg_29;
      5'b11110:
        casez_tmp_1 = reg_30;
      default:
        casez_tmp_1 = reg_31;
    endcase
  end // always_comb
  reg [31:0] casez_tmp_2;
  always_comb begin
    casez (io_waddr)
      5'b00000:
        casez_tmp_2 = reg_0;
      5'b00001:
        casez_tmp_2 = reg_1;
      5'b00010:
        casez_tmp_2 = reg_2;
      5'b00011:
        casez_tmp_2 = reg_3;
      5'b00100:
        casez_tmp_2 = reg_4;
      5'b00101:
        casez_tmp_2 = reg_5;
      5'b00110:
        casez_tmp_2 = reg_6;
      5'b00111:
        casez_tmp_2 = reg_7;
      5'b01000:
        casez_tmp_2 = reg_8;
      5'b01001:
        casez_tmp_2 = reg_9;
      5'b01010:
        casez_tmp_2 = reg_10;
      5'b01011:
        casez_tmp_2 = reg_11;
      5'b01100:
        casez_tmp_2 = reg_12;
      5'b01101:
        casez_tmp_2 = reg_13;
      5'b01110:
        casez_tmp_2 = reg_14;
      5'b01111:
        casez_tmp_2 = reg_15;
      5'b10000:
        casez_tmp_2 = reg_16;
      5'b10001:
        casez_tmp_2 = reg_17;
      5'b10010:
        casez_tmp_2 = reg_18;
      5'b10011:
        casez_tmp_2 = reg_19;
      5'b10100:
        casez_tmp_2 = reg_20;
      5'b10101:
        casez_tmp_2 = reg_21;
      5'b10110:
        casez_tmp_2 = reg_22;
      5'b10111:
        casez_tmp_2 = reg_23;
      5'b11000:
        casez_tmp_2 = reg_24;
      5'b11001:
        casez_tmp_2 = reg_25;
      5'b11010:
        casez_tmp_2 = reg_26;
      5'b11011:
        casez_tmp_2 = reg_27;
      5'b11100:
        casez_tmp_2 = reg_28;
      5'b11101:
        casez_tmp_2 = reg_29;
      5'b11110:
        casez_tmp_2 = reg_30;
      default:
        casez_tmp_2 = reg_31;
    endcase
  end // always_comb
  always @(posedge clock) begin
    if (io_waddr == 5'h0) begin
      if (io_wen)
        reg_0 <= io_wdata;
      else
        reg_0 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1) begin
      if (io_wen)
        reg_1 <= io_wdata;
      else
        reg_1 <= casez_tmp_2;
    end
    if (io_waddr == 5'h2) begin
      if (io_wen)
        reg_2 <= io_wdata;
      else
        reg_2 <= casez_tmp_2;
    end
    if (io_waddr == 5'h3) begin
      if (io_wen)
        reg_3 <= io_wdata;
      else
        reg_3 <= casez_tmp_2;
    end
    if (io_waddr == 5'h4) begin
      if (io_wen)
        reg_4 <= io_wdata;
      else
        reg_4 <= casez_tmp_2;
    end
    if (io_waddr == 5'h5) begin
      if (io_wen)
        reg_5 <= io_wdata;
      else
        reg_5 <= casez_tmp_2;
    end
    if (io_waddr == 5'h6) begin
      if (io_wen)
        reg_6 <= io_wdata;
      else
        reg_6 <= casez_tmp_2;
    end
    if (io_waddr == 5'h7) begin
      if (io_wen)
        reg_7 <= io_wdata;
      else
        reg_7 <= casez_tmp_2;
    end
    if (io_waddr == 5'h8) begin
      if (io_wen)
        reg_8 <= io_wdata;
      else
        reg_8 <= casez_tmp_2;
    end
    if (io_waddr == 5'h9) begin
      if (io_wen)
        reg_9 <= io_wdata;
      else
        reg_9 <= casez_tmp_2;
    end
    if (io_waddr == 5'hA) begin
      if (io_wen)
        reg_10 <= io_wdata;
      else
        reg_10 <= casez_tmp_2;
    end
    if (io_waddr == 5'hB) begin
      if (io_wen)
        reg_11 <= io_wdata;
      else
        reg_11 <= casez_tmp_2;
    end
    if (io_waddr == 5'hC) begin
      if (io_wen)
        reg_12 <= io_wdata;
      else
        reg_12 <= casez_tmp_2;
    end
    if (io_waddr == 5'hD) begin
      if (io_wen)
        reg_13 <= io_wdata;
      else
        reg_13 <= casez_tmp_2;
    end
    if (io_waddr == 5'hE) begin
      if (io_wen)
        reg_14 <= io_wdata;
      else
        reg_14 <= casez_tmp_2;
    end
    if (io_waddr == 5'hF) begin
      if (io_wen)
        reg_15 <= io_wdata;
      else
        reg_15 <= casez_tmp_2;
    end
    if (io_waddr == 5'h10) begin
      if (io_wen)
        reg_16 <= io_wdata;
      else
        reg_16 <= casez_tmp_2;
    end
    if (io_waddr == 5'h11) begin
      if (io_wen)
        reg_17 <= io_wdata;
      else
        reg_17 <= casez_tmp_2;
    end
    if (io_waddr == 5'h12) begin
      if (io_wen)
        reg_18 <= io_wdata;
      else
        reg_18 <= casez_tmp_2;
    end
    if (io_waddr == 5'h13) begin
      if (io_wen)
        reg_19 <= io_wdata;
      else
        reg_19 <= casez_tmp_2;
    end
    if (io_waddr == 5'h14) begin
      if (io_wen)
        reg_20 <= io_wdata;
      else
        reg_20 <= casez_tmp_2;
    end
    if (io_waddr == 5'h15) begin
      if (io_wen)
        reg_21 <= io_wdata;
      else
        reg_21 <= casez_tmp_2;
    end
    if (io_waddr == 5'h16) begin
      if (io_wen)
        reg_22 <= io_wdata;
      else
        reg_22 <= casez_tmp_2;
    end
    if (io_waddr == 5'h17) begin
      if (io_wen)
        reg_23 <= io_wdata;
      else
        reg_23 <= casez_tmp_2;
    end
    if (io_waddr == 5'h18) begin
      if (io_wen)
        reg_24 <= io_wdata;
      else
        reg_24 <= casez_tmp_2;
    end
    if (io_waddr == 5'h19) begin
      if (io_wen)
        reg_25 <= io_wdata;
      else
        reg_25 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1A) begin
      if (io_wen)
        reg_26 <= io_wdata;
      else
        reg_26 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1B) begin
      if (io_wen)
        reg_27 <= io_wdata;
      else
        reg_27 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1C) begin
      if (io_wen)
        reg_28 <= io_wdata;
      else
        reg_28 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1D) begin
      if (io_wen)
        reg_29 <= io_wdata;
      else
        reg_29 <= casez_tmp_2;
    end
    if (io_waddr == 5'h1E) begin
      if (io_wen)
        reg_30 <= io_wdata;
      else
        reg_30 <= casez_tmp_2;
    end
    if (&io_waddr) begin
      if (io_wen)
        reg_31 <= io_wdata;
      else
        reg_31 <= casez_tmp_2;
    end
  end // always @(posedge)
  assign io_rd_data = io_rd == 5'h0 ? 32'h0 : casez_tmp;
  assign io_rj_data = io_rj == 5'h0 ? 32'h0 : casez_tmp_0;
  assign io_rk_data = io_rk == 5'h0 ? 32'h0 : casez_tmp_1;
endmodule

module idu(
  input         clock,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [31:0] io_prev_bits_pc,
                io_prev_bits_npc,
                io_prev_bits_inst,
  input         io_next_ready,
  output        io_next_valid,
  output [3:0]  io_next_bits_branchOp,
                io_next_bits_aluOp,
  output [1:0]  io_next_bits_aluAsrc,
  output [2:0]  io_next_bits_aluBsrc,
  output [3:0]  io_next_bits_memOp,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [2:0]  io_next_bits_FwEX_RJ,
                io_next_bits_FwEX_RK,
                io_next_bits_FwEX_RD,
  output [31:0] io_next_bits_Imm,
  output [4:0]  io_next_bits_rd,
  output [31:0] io_next_bits_rd_data,
                io_next_bits_rj_data,
                io_next_bits_rk_data,
                io_next_bits_pc,
                io_next_bits_npc,
  input         io_stall,
                io_wen,
  input  [4:0]  io_waddr,
  input  [31:0] io_wdata,
  output [4:0]  io_RJ,
                io_RK,
                io_RD,
  input  [2:0]  io_FwID_RJ,
                io_FwID_RK,
                io_FwID_RD,
                io_FwEX_RJ,
                io_FwEX_RK,
                io_FwEX_RD,
  input  [31:0] io_ls_ALU,
                io_wb_ALU,
                io_wb_Mem,
                io_wb_Mul
);

  wire [31:0] _regFile_io_rd_data;
  wire [31:0] _regFile_io_rj_data;
  wire [31:0] _regFile_io_rk_data;
  wire        _Decode_T_1 = io_prev_bits_inst[31:15] == 17'h20;
  wire        _Decode_T_3 = io_prev_bits_inst[31:15] == 17'h22;
  wire        _Decode_T_5 = io_prev_bits_inst[31:15] == 17'h24;
  wire        _Decode_T_7 = io_prev_bits_inst[31:15] == 17'h25;
  wire        _Decode_T_9 = io_prev_bits_inst[31:15] == 17'h28;
  wire        _Decode_T_11 = io_prev_bits_inst[31:15] == 17'h29;
  wire        _Decode_T_13 = io_prev_bits_inst[31:15] == 17'h2A;
  wire        _Decode_T_15 = io_prev_bits_inst[31:15] == 17'h2B;
  wire        _Decode_T_17 = io_prev_bits_inst[31:15] == 17'h2E;
  wire        _Decode_T_19 = io_prev_bits_inst[31:15] == 17'h2F;
  wire        _Decode_T_21 = io_prev_bits_inst[31:15] == 17'h30;
  wire        _Decode_T_23 = io_prev_bits_inst[31:15] == 17'h38;
  wire        _Decode_T_25 = io_prev_bits_inst[31:15] == 17'h81;
  wire        _Decode_T_27 = io_prev_bits_inst[31:15] == 17'h89;
  wire        _Decode_T_29 = io_prev_bits_inst[31:15] == 17'h91;
  wire        _Decode_T_31 = io_prev_bits_inst[31:22] == 10'h8;
  wire        _Decode_T_33 = io_prev_bits_inst[31:22] == 10'h9;
  wire        _Decode_T_35 = io_prev_bits_inst[31:22] == 10'hA;
  wire        _Decode_T_37 = io_prev_bits_inst[31:22] == 10'hD;
  wire        _Decode_T_39 = io_prev_bits_inst[31:22] == 10'hE;
  wire        _Decode_T_41 = io_prev_bits_inst[31:22] == 10'hF;
  wire        _Decode_T_43 = io_prev_bits_inst[31:25] == 7'hA;
  wire        _Decode_T_45 = io_prev_bits_inst[31:25] == 7'hE;
  wire        _Decode_T_47 = io_prev_bits_inst[31:22] == 10'hA0;
  wire        _Decode_T_49 = io_prev_bits_inst[31:22] == 10'hA1;
  wire        _Decode_T_51 = io_prev_bits_inst[31:22] == 10'hA2;
  wire        _Decode_T_53 = io_prev_bits_inst[31:22] == 10'hA4;
  wire        _Decode_T_55 = io_prev_bits_inst[31:22] == 10'hA5;
  wire        _Decode_T_57 = io_prev_bits_inst[31:22] == 10'hA6;
  wire        _Decode_T_59 = io_prev_bits_inst[31:22] == 10'hA8;
  wire        _Decode_T_61 = io_prev_bits_inst[31:22] == 10'hA9;
  wire        _Decode_T_63 = io_prev_bits_inst[31:26] == 6'h13;
  wire        _Decode_T_65 = io_prev_bits_inst[31:26] == 6'h14;
  wire        _Decode_T_67 = io_prev_bits_inst[31:26] == 6'h15;
  wire        _Decode_T_69 = io_prev_bits_inst[31:26] == 6'h16;
  wire        _Decode_T_71 = io_prev_bits_inst[31:26] == 6'h17;
  wire        _Decode_T_73 = io_prev_bits_inst[31:26] == 6'h18;
  wire        _Decode_T_75 = io_prev_bits_inst[31:26] == 6'h19;
  wire        _Decode_T_77 = io_prev_bits_inst[31:26] == 6'h1A;
  wire        _Decode_T_79 = io_prev_bits_inst[31:26] == 6'h1B;
  wire        _GEN =
    _Decode_T_69 | _Decode_T_71 | _Decode_T_73 | _Decode_T_75 | _Decode_T_77
    | _Decode_T_79;
  wire        _GEN_0 = _Decode_T_59 | _Decode_T_61 | _Decode_T_63;
  wire        _GEN_1 = _Decode_T_59 | _Decode_T_61;
  wire        _GEN_2 =
    _Decode_T_47 | _Decode_T_49 | _Decode_T_51 | _Decode_T_53 | _Decode_T_55
    | _Decode_T_57 | _GEN_1;
  wire        _GEN_3 = _Decode_T_37 | _Decode_T_39 | _Decode_T_41;
  wire        _GEN_4 =
    _Decode_T_25 | _Decode_T_27 | _Decode_T_29 | _Decode_T_31 | _Decode_T_33
    | _Decode_T_35 | _Decode_T_37 | _Decode_T_39 | _Decode_T_41 | _Decode_T_43
    | _Decode_T_45 | _GEN_2;
  wire        _GEN_5 =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
    | _Decode_T_23;
  wire        _GEN_6 = _Decode_T_43 | _Decode_T_45;
  wire        _GEN_7 =
    _Decode_T_25 | _Decode_T_27 | _Decode_T_29 | _Decode_T_31 | _Decode_T_33
    | _Decode_T_35 | _Decode_T_37 | _Decode_T_39 | _Decode_T_41 | _GEN_6;
  wire        _GEN_8 = _Decode_T_65 | ~_Decode_T_67;
  wire        _GEN_9 = _Decode_T_53 | _Decode_T_55 | _Decode_T_57;
  wire        _GEN_10 = _Decode_T_47 | _Decode_T_49 | _Decode_T_51;
  ImmGen immGen (
    .io_inst26  (io_prev_bits_inst[25:0]),
    .io_immType
      (_GEN_5
         ? 4'h9
         : _Decode_T_25 | _Decode_T_27 | _Decode_T_29
             ? 4'h0
             : _Decode_T_31 | _Decode_T_33 | _Decode_T_35
                 ? 4'h2
                 : _GEN_3
                     ? 4'h3
                     : _GEN_6
                         ? 4'h6
                         : _GEN_2
                             ? 4'h2
                             : _Decode_T_63
                                 ? 4'h5
                                 : _Decode_T_65 | _Decode_T_67
                                     ? 4'h8
                                     : _GEN ? 4'h5 : 4'h9),
    .io_Imm     (io_next_bits_Imm)
  );
  RegFile regFile (
    .clock      (clock),
    .io_rd      (io_prev_bits_inst[4:0]),
    .io_rj      (io_prev_bits_inst[9:5]),
    .io_rk      (io_prev_bits_inst[14:10]),
    .io_rd_data (_regFile_io_rd_data),
    .io_rj_data (_regFile_io_rj_data),
    .io_rk_data (_regFile_io_rk_data),
    .io_wen     (io_wen),
    .io_waddr   (io_waddr),
    .io_wdata   (io_wdata)
  );
  assign io_prev_ready = io_next_ready;
  assign io_next_valid = io_prev_valid & ~io_stall;
  assign io_next_bits_branchOp =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
    | _Decode_T_23 | _GEN_4
      ? 4'h9
      : _Decode_T_63
          ? 4'h8
          : _Decode_T_65
              ? 4'h6
              : _Decode_T_67
                  ? 4'h7
                  : _Decode_T_69
                      ? 4'h0
                      : _Decode_T_71
                          ? 4'h1
                          : _Decode_T_73
                              ? 4'h2
                              : _Decode_T_75
                                  ? 4'h3
                                  : _Decode_T_77 ? 4'h4 : _Decode_T_79 ? 4'h5 : 4'h9;
  assign io_next_bits_aluOp =
    _Decode_T_1
      ? 4'h0
      : _Decode_T_3
          ? 4'h1
          : _Decode_T_5
              ? 4'h2
              : _Decode_T_7
                  ? 4'h3
                  : _Decode_T_9
                      ? 4'h7
                      : _Decode_T_11
                          ? 4'h4
                          : _Decode_T_13
                              ? 4'h5
                              : _Decode_T_15
                                  ? 4'h6
                                  : _Decode_T_17
                                      ? 4'h8
                                      : _Decode_T_19
                                          ? 4'h9
                                          : _Decode_T_21
                                              ? 4'hA
                                              : _Decode_T_23
                                                  ? 4'hB
                                                  : _Decode_T_25
                                                      ? 4'h8
                                                      : _Decode_T_27
                                                          ? 4'h9
                                                          : _Decode_T_29
                                                              ? 4'hA
                                                              : _Decode_T_31
                                                                  ? 4'h2
                                                                  : _Decode_T_33
                                                                      ? 4'h3
                                                                      : _Decode_T_35
                                                                          ? 4'h0
                                                                          : _Decode_T_37
                                                                              ? 4'h4
                                                                              : _Decode_T_39
                                                                                  ? 4'h5
                                                                                  : _Decode_T_41
                                                                                      ? 4'h6
                                                                                      : _Decode_T_43
                                                                                        | _Decode_T_45
                                                                                        | _Decode_T_47
                                                                                        | _Decode_T_49
                                                                                        | _Decode_T_51
                                                                                        | _Decode_T_53
                                                                                        | _Decode_T_55
                                                                                        | _Decode_T_57
                                                                                        | _GEN_0
                                                                                          ? 4'h0
                                                                                          : _Decode_T_65
                                                                                              ? 4'hC
                                                                                              : _Decode_T_67
                                                                                                  ? 4'h0
                                                                                                  : _GEN
                                                                                                      ? 4'h1
                                                                                                      : 4'hC;
  assign io_next_bits_aluAsrc =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
    | _Decode_T_23 | _Decode_T_25 | _Decode_T_27 | _Decode_T_29 | _Decode_T_31
    | _Decode_T_33 | _Decode_T_35 | _GEN_3
      ? 2'h0
      : _Decode_T_43
          ? 2'h2
          : _Decode_T_45
              ? 2'h1
              : _GEN_2
                  ? 2'h0
                  : _Decode_T_63
                      ? 2'h1
                      : _Decode_T_65 ? 2'h2 : _Decode_T_67 ? 2'h1 : {~_GEN, 1'h0};
  assign io_next_bits_aluBsrc =
    _GEN_5
      ? 3'h0
      : _GEN_4
          ? 3'h2
          : _Decode_T_63
              ? 3'h3
              : _Decode_T_65 ? 3'h4 : _Decode_T_67 ? 3'h3 : _GEN ? 3'h1 : 3'h4;
  assign io_next_bits_memOp =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
    | _Decode_T_23 | _GEN_7
      ? 4'h8
      : _Decode_T_47
          ? 4'h0
          : _Decode_T_49
              ? 4'h2
              : _Decode_T_51
                  ? 4'h4
                  : _Decode_T_53
                      ? 4'h5
                      : _Decode_T_55
                          ? 4'h6
                          : _Decode_T_57
                              ? 4'h7
                              : _Decode_T_59 ? 4'h1 : _Decode_T_61 ? 4'h3 : 4'h8;
  assign io_next_bits_wbSel =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
      ? 2'h0
      : _Decode_T_23
          ? 2'h2
          : _GEN_7
              ? 2'h0
              : _GEN_10
                  ? 2'h1
                  : _GEN_9 ? 2'h3 : _GEN_1 ? 2'h1 : _Decode_T_63 ? 2'h0 : {2{_GEN_8}};
  assign io_next_bits_wbDst =
    _Decode_T_1 | _Decode_T_3 | _Decode_T_5 | _Decode_T_7 | _Decode_T_9 | _Decode_T_11
    | _Decode_T_13 | _Decode_T_15 | _Decode_T_17 | _Decode_T_19 | _Decode_T_21
    | _Decode_T_23 | _Decode_T_25 | _Decode_T_27 | _Decode_T_29 | _Decode_T_31
    | _Decode_T_33 | _Decode_T_35 | _Decode_T_37 | _Decode_T_39 | _Decode_T_41
    | _Decode_T_43 | _Decode_T_45 | _GEN_10
      ? 2'h0
      : _GEN_9 ? 2'h2 : _GEN_0 ? 2'h0 : _GEN_8 ? 2'h2 : 2'h1;
  assign io_next_bits_FwEX_RJ = io_FwEX_RJ;
  assign io_next_bits_FwEX_RK = io_FwEX_RK;
  assign io_next_bits_FwEX_RD = io_FwEX_RD;
  assign io_next_bits_rd = io_prev_bits_inst[4:0];
  assign io_next_bits_rd_data =
    io_FwID_RD == 3'h3
      ? io_wb_Mul
      : io_FwID_RD == 3'h2
          ? io_wb_Mem
          : io_FwID_RD == 3'h1
              ? io_wb_ALU
              : io_FwID_RD == 3'h0 ? io_ls_ALU : _regFile_io_rd_data;
  assign io_next_bits_rj_data =
    io_FwID_RJ == 3'h3
      ? io_wb_Mul
      : io_FwID_RJ == 3'h2
          ? io_wb_Mem
          : io_FwID_RJ == 3'h1
              ? io_wb_ALU
              : io_FwID_RJ == 3'h0 ? io_ls_ALU : _regFile_io_rj_data;
  assign io_next_bits_rk_data =
    io_FwID_RK == 3'h3
      ? io_wb_Mul
      : io_FwID_RK == 3'h2
          ? io_wb_Mem
          : io_FwID_RK == 3'h1
              ? io_wb_ALU
              : io_FwID_RK == 3'h0 ? io_ls_ALU : _regFile_io_rk_data;
  assign io_next_bits_pc = io_prev_bits_pc;
  assign io_next_bits_npc = io_prev_bits_npc;
  assign io_RJ = io_prev_valid ? io_prev_bits_inst[9:5] : 5'h0;
  assign io_RK = io_prev_valid ? io_prev_bits_inst[14:10] : 5'h0;
  assign io_RD = io_prev_valid ? io_prev_bits_inst[4:0] : 5'h0;
endmodule

module buffer_1(
  input         clock,
                reset,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [3:0]  io_prev_bits_branchOp,
                io_prev_bits_aluOp,
  input  [1:0]  io_prev_bits_aluAsrc,
  input  [2:0]  io_prev_bits_aluBsrc,
  input  [3:0]  io_prev_bits_memOp,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [2:0]  io_prev_bits_FwEX_RJ,
                io_prev_bits_FwEX_RK,
                io_prev_bits_FwEX_RD,
  input  [31:0] io_prev_bits_Imm,
  input  [4:0]  io_prev_bits_rd,
  input  [31:0] io_prev_bits_rd_data,
                io_prev_bits_rj_data,
                io_prev_bits_rk_data,
                io_prev_bits_pc,
                io_prev_bits_npc,
  input         io_next_ready,
  output        io_next_valid,
  output [3:0]  io_next_bits_branchOp,
                io_next_bits_aluOp,
  output [1:0]  io_next_bits_aluAsrc,
  output [2:0]  io_next_bits_aluBsrc,
  output [3:0]  io_next_bits_memOp,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [2:0]  io_next_bits_FwEX_RJ,
                io_next_bits_FwEX_RK,
                io_next_bits_FwEX_RD,
  output [31:0] io_next_bits_Imm,
  output [4:0]  io_next_bits_rd,
  output [31:0] io_next_bits_rd_data,
                io_next_bits_rj_data,
                io_next_bits_rk_data,
                io_next_bits_pc,
                io_next_bits_npc,
  input         io_stall,
                io_flush
);

  reg         state;
  reg  [3:0]  regs_branchOp;
  reg  [3:0]  regs_aluOp;
  reg  [1:0]  regs_aluAsrc;
  reg  [2:0]  regs_aluBsrc;
  reg  [3:0]  regs_memOp;
  reg  [1:0]  regs_wbSel;
  reg  [1:0]  regs_wbDst;
  reg  [2:0]  regs_FwEX_RJ;
  reg  [2:0]  regs_FwEX_RK;
  reg  [2:0]  regs_FwEX_RD;
  reg  [31:0] regs_Imm;
  reg  [4:0]  regs_rd;
  reg  [31:0] regs_rd_data;
  reg  [31:0] regs_rj_data;
  reg  [31:0] regs_rk_data;
  reg  [31:0] regs_pc;
  reg  [31:0] regs_npc;
  wire        _GEN = state & ~io_next_ready | io_stall;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else
      state <= ~io_flush & (_GEN ? state : io_prev_valid);
    if (io_flush | _GEN | ~io_prev_valid) begin
    end
    else begin
      regs_branchOp <= io_prev_bits_branchOp;
      regs_aluOp <= io_prev_bits_aluOp;
      regs_aluAsrc <= io_prev_bits_aluAsrc;
      regs_aluBsrc <= io_prev_bits_aluBsrc;
      regs_memOp <= io_prev_bits_memOp;
      regs_wbSel <= io_prev_bits_wbSel;
      regs_wbDst <= io_prev_bits_wbDst;
      regs_FwEX_RJ <= io_prev_bits_FwEX_RJ;
      regs_FwEX_RK <= io_prev_bits_FwEX_RK;
      regs_FwEX_RD <= io_prev_bits_FwEX_RD;
      regs_Imm <= io_prev_bits_Imm;
      regs_rd <= io_prev_bits_rd;
      regs_rd_data <= io_prev_bits_rd_data;
      regs_rj_data <= io_prev_bits_rj_data;
      regs_rk_data <= io_prev_bits_rk_data;
      regs_pc <= io_prev_bits_pc;
      regs_npc <= io_prev_bits_npc;
    end
  end // always @(posedge)
  assign io_prev_ready = ~io_flush & ~_GEN;
  assign io_next_valid = state;
  assign io_next_bits_branchOp = regs_branchOp;
  assign io_next_bits_aluOp = regs_aluOp;
  assign io_next_bits_aluAsrc = regs_aluAsrc;
  assign io_next_bits_aluBsrc = regs_aluBsrc;
  assign io_next_bits_memOp = regs_memOp;
  assign io_next_bits_wbSel = regs_wbSel;
  assign io_next_bits_wbDst = regs_wbDst;
  assign io_next_bits_FwEX_RJ = regs_FwEX_RJ;
  assign io_next_bits_FwEX_RK = regs_FwEX_RK;
  assign io_next_bits_FwEX_RD = regs_FwEX_RD;
  assign io_next_bits_Imm = regs_Imm;
  assign io_next_bits_rd = regs_rd;
  assign io_next_bits_rd_data = regs_rd_data;
  assign io_next_bits_rj_data = regs_rj_data;
  assign io_next_bits_rk_data = regs_rk_data;
  assign io_next_bits_pc = regs_pc;
  assign io_next_bits_npc = regs_npc;
endmodule

module booth2(
  input  [63:0] io_SignExtA,
                io_SignExtA_,
  input  [2:0]  io_B,
  output [63:0] io_S
);

  reg  [64:0] casez_tmp;
  wire [64:0] _GEN = {1'h0, io_B == 3'h2 | io_B == 3'h1 ? io_SignExtA : 64'h0};
  wire [64:0] _GEN_0 = {1'h0, io_SignExtA_};
  always_comb begin
    casez (io_B)
      3'b000:
        casez_tmp = _GEN;
      3'b001:
        casez_tmp = _GEN;
      3'b010:
        casez_tmp = _GEN;
      3'b011:
        casez_tmp = {io_SignExtA, 1'h0};
      3'b100:
        casez_tmp = {io_SignExtA_, 1'h0};
      3'b101:
        casez_tmp = _GEN_0;
      3'b110:
        casez_tmp = _GEN_0;
      default:
        casez_tmp = 65'h0;
    endcase
  end // always_comb
  assign io_S = casez_tmp[63:0];
endmodule

module csa(
  input  [63:0] io_A,
                io_B,
                io_Cin,
  output [63:0] io_S,
                io_Cout
);

  assign io_S =
    {io_A[63] ^ io_B[63] ^ io_Cin[63],
     io_A[62] ^ io_B[62] ^ io_Cin[62],
     io_A[61] ^ io_B[61] ^ io_Cin[61],
     io_A[60] ^ io_B[60] ^ io_Cin[60],
     io_A[59] ^ io_B[59] ^ io_Cin[59],
     io_A[58] ^ io_B[58] ^ io_Cin[58],
     io_A[57] ^ io_B[57] ^ io_Cin[57],
     io_A[56] ^ io_B[56] ^ io_Cin[56],
     io_A[55] ^ io_B[55] ^ io_Cin[55],
     io_A[54] ^ io_B[54] ^ io_Cin[54],
     io_A[53] ^ io_B[53] ^ io_Cin[53],
     io_A[52] ^ io_B[52] ^ io_Cin[52],
     io_A[51] ^ io_B[51] ^ io_Cin[51],
     io_A[50] ^ io_B[50] ^ io_Cin[50],
     io_A[49] ^ io_B[49] ^ io_Cin[49],
     io_A[48] ^ io_B[48] ^ io_Cin[48],
     io_A[47] ^ io_B[47] ^ io_Cin[47],
     io_A[46] ^ io_B[46] ^ io_Cin[46],
     io_A[45] ^ io_B[45] ^ io_Cin[45],
     io_A[44] ^ io_B[44] ^ io_Cin[44],
     io_A[43] ^ io_B[43] ^ io_Cin[43],
     io_A[42] ^ io_B[42] ^ io_Cin[42],
     io_A[41] ^ io_B[41] ^ io_Cin[41],
     io_A[40] ^ io_B[40] ^ io_Cin[40],
     io_A[39] ^ io_B[39] ^ io_Cin[39],
     io_A[38] ^ io_B[38] ^ io_Cin[38],
     io_A[37] ^ io_B[37] ^ io_Cin[37],
     io_A[36] ^ io_B[36] ^ io_Cin[36],
     io_A[35] ^ io_B[35] ^ io_Cin[35],
     io_A[34] ^ io_B[34] ^ io_Cin[34],
     io_A[33] ^ io_B[33] ^ io_Cin[33],
     io_A[32] ^ io_B[32] ^ io_Cin[32],
     io_A[31] ^ io_B[31] ^ io_Cin[31],
     io_A[30] ^ io_B[30] ^ io_Cin[30],
     io_A[29] ^ io_B[29] ^ io_Cin[29],
     io_A[28] ^ io_B[28] ^ io_Cin[28],
     io_A[27] ^ io_B[27] ^ io_Cin[27],
     io_A[26] ^ io_B[26] ^ io_Cin[26],
     io_A[25] ^ io_B[25] ^ io_Cin[25],
     io_A[24] ^ io_B[24] ^ io_Cin[24],
     io_A[23] ^ io_B[23] ^ io_Cin[23],
     io_A[22] ^ io_B[22] ^ io_Cin[22],
     io_A[21] ^ io_B[21] ^ io_Cin[21],
     io_A[20] ^ io_B[20] ^ io_Cin[20],
     io_A[19] ^ io_B[19] ^ io_Cin[19],
     io_A[18] ^ io_B[18] ^ io_Cin[18],
     io_A[17] ^ io_B[17] ^ io_Cin[17],
     io_A[16] ^ io_B[16] ^ io_Cin[16],
     io_A[15] ^ io_B[15] ^ io_Cin[15],
     io_A[14] ^ io_B[14] ^ io_Cin[14],
     io_A[13] ^ io_B[13] ^ io_Cin[13],
     io_A[12] ^ io_B[12] ^ io_Cin[12],
     io_A[11] ^ io_B[11] ^ io_Cin[11],
     io_A[10] ^ io_B[10] ^ io_Cin[10],
     io_A[9] ^ io_B[9] ^ io_Cin[9],
     io_A[8] ^ io_B[8] ^ io_Cin[8],
     io_A[7] ^ io_B[7] ^ io_Cin[7],
     io_A[6] ^ io_B[6] ^ io_Cin[6],
     io_A[5] ^ io_B[5] ^ io_Cin[5],
     io_A[4] ^ io_B[4] ^ io_Cin[4],
     io_A[3] ^ io_B[3] ^ io_Cin[3],
     io_A[2] ^ io_B[2] ^ io_Cin[2],
     io_A[1] ^ io_B[1] ^ io_Cin[1],
     io_A[0] ^ io_B[0] ^ io_Cin[0]};
  assign io_Cout =
    {io_A[63] & io_B[63] | io_A[63] & io_Cin[63] | io_B[63] & io_Cin[63],
     io_A[62] & io_B[62] | io_A[62] & io_Cin[62] | io_B[62] & io_Cin[62],
     io_A[61] & io_B[61] | io_A[61] & io_Cin[61] | io_B[61] & io_Cin[61],
     io_A[60] & io_B[60] | io_A[60] & io_Cin[60] | io_B[60] & io_Cin[60],
     io_A[59] & io_B[59] | io_A[59] & io_Cin[59] | io_B[59] & io_Cin[59],
     io_A[58] & io_B[58] | io_A[58] & io_Cin[58] | io_B[58] & io_Cin[58],
     io_A[57] & io_B[57] | io_A[57] & io_Cin[57] | io_B[57] & io_Cin[57],
     io_A[56] & io_B[56] | io_A[56] & io_Cin[56] | io_B[56] & io_Cin[56],
     io_A[55] & io_B[55] | io_A[55] & io_Cin[55] | io_B[55] & io_Cin[55],
     io_A[54] & io_B[54] | io_A[54] & io_Cin[54] | io_B[54] & io_Cin[54],
     io_A[53] & io_B[53] | io_A[53] & io_Cin[53] | io_B[53] & io_Cin[53],
     io_A[52] & io_B[52] | io_A[52] & io_Cin[52] | io_B[52] & io_Cin[52],
     io_A[51] & io_B[51] | io_A[51] & io_Cin[51] | io_B[51] & io_Cin[51],
     io_A[50] & io_B[50] | io_A[50] & io_Cin[50] | io_B[50] & io_Cin[50],
     io_A[49] & io_B[49] | io_A[49] & io_Cin[49] | io_B[49] & io_Cin[49],
     io_A[48] & io_B[48] | io_A[48] & io_Cin[48] | io_B[48] & io_Cin[48],
     io_A[47] & io_B[47] | io_A[47] & io_Cin[47] | io_B[47] & io_Cin[47],
     io_A[46] & io_B[46] | io_A[46] & io_Cin[46] | io_B[46] & io_Cin[46],
     io_A[45] & io_B[45] | io_A[45] & io_Cin[45] | io_B[45] & io_Cin[45],
     io_A[44] & io_B[44] | io_A[44] & io_Cin[44] | io_B[44] & io_Cin[44],
     io_A[43] & io_B[43] | io_A[43] & io_Cin[43] | io_B[43] & io_Cin[43],
     io_A[42] & io_B[42] | io_A[42] & io_Cin[42] | io_B[42] & io_Cin[42],
     io_A[41] & io_B[41] | io_A[41] & io_Cin[41] | io_B[41] & io_Cin[41],
     io_A[40] & io_B[40] | io_A[40] & io_Cin[40] | io_B[40] & io_Cin[40],
     io_A[39] & io_B[39] | io_A[39] & io_Cin[39] | io_B[39] & io_Cin[39],
     io_A[38] & io_B[38] | io_A[38] & io_Cin[38] | io_B[38] & io_Cin[38],
     io_A[37] & io_B[37] | io_A[37] & io_Cin[37] | io_B[37] & io_Cin[37],
     io_A[36] & io_B[36] | io_A[36] & io_Cin[36] | io_B[36] & io_Cin[36],
     io_A[35] & io_B[35] | io_A[35] & io_Cin[35] | io_B[35] & io_Cin[35],
     io_A[34] & io_B[34] | io_A[34] & io_Cin[34] | io_B[34] & io_Cin[34],
     io_A[33] & io_B[33] | io_A[33] & io_Cin[33] | io_B[33] & io_Cin[33],
     io_A[32] & io_B[32] | io_A[32] & io_Cin[32] | io_B[32] & io_Cin[32],
     io_A[31] & io_B[31] | io_A[31] & io_Cin[31] | io_B[31] & io_Cin[31],
     io_A[30] & io_B[30] | io_A[30] & io_Cin[30] | io_B[30] & io_Cin[30],
     io_A[29] & io_B[29] | io_A[29] & io_Cin[29] | io_B[29] & io_Cin[29],
     io_A[28] & io_B[28] | io_A[28] & io_Cin[28] | io_B[28] & io_Cin[28],
     io_A[27] & io_B[27] | io_A[27] & io_Cin[27] | io_B[27] & io_Cin[27],
     io_A[26] & io_B[26] | io_A[26] & io_Cin[26] | io_B[26] & io_Cin[26],
     io_A[25] & io_B[25] | io_A[25] & io_Cin[25] | io_B[25] & io_Cin[25],
     io_A[24] & io_B[24] | io_A[24] & io_Cin[24] | io_B[24] & io_Cin[24],
     io_A[23] & io_B[23] | io_A[23] & io_Cin[23] | io_B[23] & io_Cin[23],
     io_A[22] & io_B[22] | io_A[22] & io_Cin[22] | io_B[22] & io_Cin[22],
     io_A[21] & io_B[21] | io_A[21] & io_Cin[21] | io_B[21] & io_Cin[21],
     io_A[20] & io_B[20] | io_A[20] & io_Cin[20] | io_B[20] & io_Cin[20],
     io_A[19] & io_B[19] | io_A[19] & io_Cin[19] | io_B[19] & io_Cin[19],
     io_A[18] & io_B[18] | io_A[18] & io_Cin[18] | io_B[18] & io_Cin[18],
     io_A[17] & io_B[17] | io_A[17] & io_Cin[17] | io_B[17] & io_Cin[17],
     io_A[16] & io_B[16] | io_A[16] & io_Cin[16] | io_B[16] & io_Cin[16],
     io_A[15] & io_B[15] | io_A[15] & io_Cin[15] | io_B[15] & io_Cin[15],
     io_A[14] & io_B[14] | io_A[14] & io_Cin[14] | io_B[14] & io_Cin[14],
     io_A[13] & io_B[13] | io_A[13] & io_Cin[13] | io_B[13] & io_Cin[13],
     io_A[12] & io_B[12] | io_A[12] & io_Cin[12] | io_B[12] & io_Cin[12],
     io_A[11] & io_B[11] | io_A[11] & io_Cin[11] | io_B[11] & io_Cin[11],
     io_A[10] & io_B[10] | io_A[10] & io_Cin[10] | io_B[10] & io_Cin[10],
     io_A[9] & io_B[9] | io_A[9] & io_Cin[9] | io_B[9] & io_Cin[9],
     io_A[8] & io_B[8] | io_A[8] & io_Cin[8] | io_B[8] & io_Cin[8],
     io_A[7] & io_B[7] | io_A[7] & io_Cin[7] | io_B[7] & io_Cin[7],
     io_A[6] & io_B[6] | io_A[6] & io_Cin[6] | io_B[6] & io_Cin[6],
     io_A[5] & io_B[5] | io_A[5] & io_Cin[5] | io_B[5] & io_Cin[5],
     io_A[4] & io_B[4] | io_A[4] & io_Cin[4] | io_B[4] & io_Cin[4],
     io_A[3] & io_B[3] | io_A[3] & io_Cin[3] | io_B[3] & io_Cin[3],
     io_A[2] & io_B[2] | io_A[2] & io_Cin[2] | io_B[2] & io_Cin[2],
     io_A[1] & io_B[1] | io_A[1] & io_Cin[1] | io_B[1] & io_Cin[1],
     io_A[0] & io_B[0] | io_A[0] & io_Cin[0] | io_B[0] & io_Cin[0]};
endmodule

module wallace(
  input         clock,
                io_stall,
  input  [31:0] io_A,
                io_B,
  output [63:0] io_S
);

  wire [63:0] _csas_0_5_io_S;
  wire [63:0] _csas_0_5_io_Cout;
  wire [63:0] _csas_0_4_io_S;
  wire [63:0] _csas_0_4_io_Cout;
  wire [63:0] _csas_1_3_io_S;
  wire [63:0] _csas_1_3_io_Cout;
  wire [63:0] _csas_0_3_io_S;
  wire [63:0] _csas_0_3_io_Cout;
  wire [63:0] _csas_1_2_io_S;
  wire [63:0] _csas_1_2_io_Cout;
  wire [63:0] _csas_0_2_io_S;
  wire [63:0] _csas_0_2_io_Cout;
  wire [63:0] _csas_2_1_io_S;
  wire [63:0] _csas_2_1_io_Cout;
  wire [63:0] _csas_1_1_io_S;
  wire [63:0] _csas_1_1_io_Cout;
  wire [63:0] _csas_0_1_io_S;
  wire [63:0] _csas_0_1_io_Cout;
  wire [63:0] _csas_4_io_S;
  wire [63:0] _csas_4_io_Cout;
  wire [63:0] _csas_3_io_S;
  wire [63:0] _csas_3_io_Cout;
  wire [63:0] _csas_2_io_S;
  wire [63:0] _csas_2_io_Cout;
  wire [63:0] _csas_1_io_S;
  wire [63:0] _csas_1_io_Cout;
  wire [63:0] _csas_0_io_S;
  wire [63:0] _csas_0_io_Cout;
  wire [63:0] _booths_15_io_S;
  wire [63:0] _booths_14_io_S;
  wire [63:0] _booths_13_io_S;
  wire [63:0] _booths_12_io_S;
  wire [63:0] _booths_11_io_S;
  wire [63:0] _booths_10_io_S;
  wire [63:0] _booths_9_io_S;
  wire [63:0] _booths_8_io_S;
  wire [63:0] _booths_7_io_S;
  wire [63:0] _booths_6_io_S;
  wire [63:0] _booths_5_io_S;
  wire [63:0] _booths_4_io_S;
  wire [63:0] _booths_3_io_S;
  wire [63:0] _booths_2_io_S;
  wire [63:0] _booths_1_io_S;
  wire [63:0] _booths_0_io_S;
  reg  [63:0] output_0;
  reg  [63:0] output_1;
  reg  [63:0] output_2;
  reg  [63:0] output_3;
  reg  [63:0] output_4;
  reg  [63:0] output_5;
  reg  [63:0] output_6;
  reg  [63:0] output_7;
  reg  [63:0] output_8;
  reg  [63:0] output_9;
  reg  [63:0] output_10;
  reg  [63:0] output_11;
  reg  [63:0] output_12;
  reg  [63:0] output_13;
  reg  [63:0] output_14;
  reg  [63:0] output_15;
  wire [31:0] A_ = 32'h0 - io_A;
  wire [63:0] SignExtA = {{32{io_A[31]}}, io_A};
  wire [63:0] SignExtA_ = {{32{A_[31]}}, A_};
  reg  [63:0] S;
  always @(posedge clock) begin
    if (io_stall) begin
    end
    else begin
      output_0 <= _booths_0_io_S;
      output_1 <= {_booths_1_io_S[61:0], 2'h0};
      output_2 <= {_booths_2_io_S[59:0], 4'h0};
      output_3 <= {_booths_3_io_S[57:0], 6'h0};
      output_4 <= {_booths_4_io_S[55:0], 8'h0};
      output_5 <= {_booths_5_io_S[53:0], 10'h0};
      output_6 <= {_booths_6_io_S[51:0], 12'h0};
      output_7 <= {_booths_7_io_S[49:0], 14'h0};
      output_8 <= {_booths_8_io_S[47:0], 16'h0};
      output_9 <= {_booths_9_io_S[45:0], 18'h0};
      output_10 <= {_booths_10_io_S[43:0], 20'h0};
      output_11 <= {_booths_11_io_S[41:0], 22'h0};
      output_12 <= {_booths_12_io_S[39:0], 24'h0};
      output_13 <= {_booths_13_io_S[37:0], 26'h0};
      output_14 <= {_booths_14_io_S[35:0], 28'h0};
      output_15 <= {_booths_15_io_S[33:0], 30'h0};
      S <= _csas_0_5_io_S + {_csas_0_5_io_Cout[62:0], 1'h0};
    end
  end // always @(posedge)
  booth2 booths_0 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         ({io_B[1:0], 1'h0}),
    .io_S         (_booths_0_io_S)
  );
  booth2 booths_1 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[3:1]),
    .io_S         (_booths_1_io_S)
  );
  booth2 booths_2 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[5:3]),
    .io_S         (_booths_2_io_S)
  );
  booth2 booths_3 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[7:5]),
    .io_S         (_booths_3_io_S)
  );
  booth2 booths_4 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[9:7]),
    .io_S         (_booths_4_io_S)
  );
  booth2 booths_5 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[11:9]),
    .io_S         (_booths_5_io_S)
  );
  booth2 booths_6 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[13:11]),
    .io_S         (_booths_6_io_S)
  );
  booth2 booths_7 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[15:13]),
    .io_S         (_booths_7_io_S)
  );
  booth2 booths_8 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[17:15]),
    .io_S         (_booths_8_io_S)
  );
  booth2 booths_9 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[19:17]),
    .io_S         (_booths_9_io_S)
  );
  booth2 booths_10 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[21:19]),
    .io_S         (_booths_10_io_S)
  );
  booth2 booths_11 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[23:21]),
    .io_S         (_booths_11_io_S)
  );
  booth2 booths_12 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[25:23]),
    .io_S         (_booths_12_io_S)
  );
  booth2 booths_13 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[27:25]),
    .io_S         (_booths_13_io_S)
  );
  booth2 booths_14 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[29:27]),
    .io_S         (_booths_14_io_S)
  );
  booth2 booths_15 (
    .io_SignExtA  (SignExtA),
    .io_SignExtA_ (SignExtA_),
    .io_B         (io_B[31:29]),
    .io_S         (_booths_15_io_S)
  );
  csa csas_0 (
    .io_A    (output_0),
    .io_B    (output_1),
    .io_Cin  (output_2),
    .io_S    (_csas_0_io_S),
    .io_Cout (_csas_0_io_Cout)
  );
  csa csas_1 (
    .io_A    (output_3),
    .io_B    (output_4),
    .io_Cin  (output_5),
    .io_S    (_csas_1_io_S),
    .io_Cout (_csas_1_io_Cout)
  );
  csa csas_2 (
    .io_A    (output_6),
    .io_B    (output_7),
    .io_Cin  (output_8),
    .io_S    (_csas_2_io_S),
    .io_Cout (_csas_2_io_Cout)
  );
  csa csas_3 (
    .io_A    (output_9),
    .io_B    (output_10),
    .io_Cin  (output_11),
    .io_S    (_csas_3_io_S),
    .io_Cout (_csas_3_io_Cout)
  );
  csa csas_4 (
    .io_A    (output_12),
    .io_B    (output_13),
    .io_Cin  (output_14),
    .io_S    (_csas_4_io_S),
    .io_Cout (_csas_4_io_Cout)
  );
  csa csas_0_1 (
    .io_A    (_csas_0_io_S),
    .io_B    ({_csas_0_io_Cout[62:0], 1'h0}),
    .io_Cin  (_csas_1_io_S),
    .io_S    (_csas_0_1_io_S),
    .io_Cout (_csas_0_1_io_Cout)
  );
  csa csas_1_1 (
    .io_A    ({_csas_1_io_Cout[62:0], 1'h0}),
    .io_B    (_csas_2_io_S),
    .io_Cin  ({_csas_2_io_Cout[62:0], 1'h0}),
    .io_S    (_csas_1_1_io_S),
    .io_Cout (_csas_1_1_io_Cout)
  );
  csa csas_2_1 (
    .io_A    (_csas_3_io_S),
    .io_B    ({_csas_3_io_Cout[62:0], 1'h0}),
    .io_Cin  (_csas_4_io_S),
    .io_S    (_csas_2_1_io_S),
    .io_Cout (_csas_2_1_io_Cout)
  );
  csa csas_0_2 (
    .io_A    (_csas_0_1_io_S),
    .io_B    ({_csas_0_1_io_Cout[62:0], 1'h0}),
    .io_Cin  (_csas_1_1_io_S),
    .io_S    (_csas_0_2_io_S),
    .io_Cout (_csas_0_2_io_Cout)
  );
  csa csas_1_2 (
    .io_A    ({_csas_1_1_io_Cout[62:0], 1'h0}),
    .io_B    (_csas_2_1_io_S),
    .io_Cin  ({_csas_2_1_io_Cout[62:0], 1'h0}),
    .io_S    (_csas_1_2_io_S),
    .io_Cout (_csas_1_2_io_Cout)
  );
  csa csas_0_3 (
    .io_A    (_csas_0_2_io_S),
    .io_B    ({_csas_0_2_io_Cout[62:0], 1'h0}),
    .io_Cin  (_csas_1_2_io_S),
    .io_S    (_csas_0_3_io_S),
    .io_Cout (_csas_0_3_io_Cout)
  );
  csa csas_1_3 (
    .io_A    ({_csas_1_2_io_Cout[62:0], 1'h0}),
    .io_B    ({_csas_4_io_Cout[62:0], 1'h0}),
    .io_Cin  (output_15),
    .io_S    (_csas_1_3_io_S),
    .io_Cout (_csas_1_3_io_Cout)
  );
  csa csas_0_4 (
    .io_A    (_csas_0_3_io_S),
    .io_B    ({_csas_0_3_io_Cout[62:0], 1'h0}),
    .io_Cin  (_csas_1_3_io_S),
    .io_S    (_csas_0_4_io_S),
    .io_Cout (_csas_0_4_io_Cout)
  );
  csa csas_0_5 (
    .io_A    (_csas_0_4_io_S),
    .io_B    ({_csas_0_4_io_Cout[62:0], 1'h0}),
    .io_Cin  ({_csas_1_3_io_Cout[62:0], 1'h0}),
    .io_S    (_csas_0_5_io_S),
    .io_Cout (_csas_0_5_io_Cout)
  );
  assign io_S = S;
endmodule

module bshifter(
  input  [31:0] io_A,
  input  [4:0]  io_B,
  input  [3:0]  io_Op,
  output [31:0] io_Out
);

  wire _GEN = io_Op != 4'h8;
  wire Shifter_1_0 =
    io_B[0] ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[1] : _GEN & io_A[0]) : io_A[0];
  wire Shifter_1_1 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[2] : io_Op == 4'h8 ? io_A[0] : io_A[1])
      : io_A[1];
  wire Shifter_1_2 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[3] : io_Op == 4'h8 ? io_A[1] : io_A[2])
      : io_A[2];
  wire Shifter_1_3 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[4] : io_Op == 4'h8 ? io_A[2] : io_A[3])
      : io_A[3];
  wire Shifter_1_4 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[5] : io_Op == 4'h8 ? io_A[3] : io_A[4])
      : io_A[4];
  wire Shifter_1_5 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[6] : io_Op == 4'h8 ? io_A[4] : io_A[5])
      : io_A[5];
  wire Shifter_1_6 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[7] : io_Op == 4'h8 ? io_A[5] : io_A[6])
      : io_A[6];
  wire Shifter_1_7 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[8] : io_Op == 4'h8 ? io_A[6] : io_A[7])
      : io_A[7];
  wire Shifter_1_8 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[9] : io_Op == 4'h8 ? io_A[7] : io_A[8])
      : io_A[8];
  wire Shifter_1_9 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[10] : io_Op == 4'h8 ? io_A[8] : io_A[9])
      : io_A[9];
  wire Shifter_1_10 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[11] : io_Op == 4'h8 ? io_A[9] : io_A[10])
      : io_A[10];
  wire Shifter_1_11 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[12] : io_Op == 4'h8 ? io_A[10] : io_A[11])
      : io_A[11];
  wire Shifter_1_12 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[13] : io_Op == 4'h8 ? io_A[11] : io_A[12])
      : io_A[12];
  wire Shifter_1_13 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[14] : io_Op == 4'h8 ? io_A[12] : io_A[13])
      : io_A[13];
  wire Shifter_1_14 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[15] : io_Op == 4'h8 ? io_A[13] : io_A[14])
      : io_A[14];
  wire Shifter_1_15 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[16] : io_Op == 4'h8 ? io_A[14] : io_A[15])
      : io_A[15];
  wire Shifter_1_16 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[17] : io_Op == 4'h8 ? io_A[15] : io_A[16])
      : io_A[16];
  wire Shifter_1_17 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[18] : io_Op == 4'h8 ? io_A[16] : io_A[17])
      : io_A[17];
  wire Shifter_1_18 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[19] : io_Op == 4'h8 ? io_A[17] : io_A[18])
      : io_A[18];
  wire Shifter_1_19 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[20] : io_Op == 4'h8 ? io_A[18] : io_A[19])
      : io_A[19];
  wire Shifter_1_20 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[21] : io_Op == 4'h8 ? io_A[19] : io_A[20])
      : io_A[20];
  wire Shifter_1_21 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[22] : io_Op == 4'h8 ? io_A[20] : io_A[21])
      : io_A[21];
  wire Shifter_1_22 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[23] : io_Op == 4'h8 ? io_A[21] : io_A[22])
      : io_A[22];
  wire Shifter_1_23 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[24] : io_Op == 4'h8 ? io_A[22] : io_A[23])
      : io_A[23];
  wire Shifter_1_24 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[25] : io_Op == 4'h8 ? io_A[23] : io_A[24])
      : io_A[24];
  wire Shifter_1_25 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[26] : io_Op == 4'h8 ? io_A[24] : io_A[25])
      : io_A[25];
  wire Shifter_1_26 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[27] : io_Op == 4'h8 ? io_A[25] : io_A[26])
      : io_A[26];
  wire Shifter_1_27 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[28] : io_Op == 4'h8 ? io_A[26] : io_A[27])
      : io_A[27];
  wire Shifter_1_28 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[29] : io_Op == 4'h8 ? io_A[27] : io_A[28])
      : io_A[28];
  wire Shifter_1_29 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[30] : io_Op == 4'h8 ? io_A[28] : io_A[29])
      : io_A[29];
  wire Shifter_1_30 =
    io_B[0]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? io_A[31] : io_Op == 4'h8 ? io_A[29] : io_A[30])
      : io_A[30];
  wire _GEN_0 = io_Op != 4'h9;
  wire Shifter_1_31 =
    ~(io_B[0]) | io_Op == 4'hA
      ? io_A[31]
      : _GEN_0 & (io_Op == 4'h8 ? io_A[30] : io_A[31]);
  wire Shifter_2_0 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_1_2 : _GEN & Shifter_1_0)
      : Shifter_1_0;
  wire Shifter_2_1 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_1_3 : _GEN & Shifter_1_1)
      : Shifter_1_1;
  wire Shifter_2_2 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_4
           : io_Op == 4'h8 ? Shifter_1_0 : Shifter_1_2)
      : Shifter_1_2;
  wire Shifter_2_3 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_5
           : io_Op == 4'h8 ? Shifter_1_1 : Shifter_1_3)
      : Shifter_1_3;
  wire Shifter_2_4 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_6
           : io_Op == 4'h8 ? Shifter_1_2 : Shifter_1_4)
      : Shifter_1_4;
  wire Shifter_2_5 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_7
           : io_Op == 4'h8 ? Shifter_1_3 : Shifter_1_5)
      : Shifter_1_5;
  wire Shifter_2_6 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_8
           : io_Op == 4'h8 ? Shifter_1_4 : Shifter_1_6)
      : Shifter_1_6;
  wire Shifter_2_7 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_9
           : io_Op == 4'h8 ? Shifter_1_5 : Shifter_1_7)
      : Shifter_1_7;
  wire Shifter_2_8 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_10
           : io_Op == 4'h8 ? Shifter_1_6 : Shifter_1_8)
      : Shifter_1_8;
  wire Shifter_2_9 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_11
           : io_Op == 4'h8 ? Shifter_1_7 : Shifter_1_9)
      : Shifter_1_9;
  wire Shifter_2_10 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_12
           : io_Op == 4'h8 ? Shifter_1_8 : Shifter_1_10)
      : Shifter_1_10;
  wire Shifter_2_11 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_13
           : io_Op == 4'h8 ? Shifter_1_9 : Shifter_1_11)
      : Shifter_1_11;
  wire Shifter_2_12 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_14
           : io_Op == 4'h8 ? Shifter_1_10 : Shifter_1_12)
      : Shifter_1_12;
  wire Shifter_2_13 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_15
           : io_Op == 4'h8 ? Shifter_1_11 : Shifter_1_13)
      : Shifter_1_13;
  wire Shifter_2_14 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_16
           : io_Op == 4'h8 ? Shifter_1_12 : Shifter_1_14)
      : Shifter_1_14;
  wire Shifter_2_15 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_17
           : io_Op == 4'h8 ? Shifter_1_13 : Shifter_1_15)
      : Shifter_1_15;
  wire Shifter_2_16 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_18
           : io_Op == 4'h8 ? Shifter_1_14 : Shifter_1_16)
      : Shifter_1_16;
  wire Shifter_2_17 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_19
           : io_Op == 4'h8 ? Shifter_1_15 : Shifter_1_17)
      : Shifter_1_17;
  wire Shifter_2_18 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_20
           : io_Op == 4'h8 ? Shifter_1_16 : Shifter_1_18)
      : Shifter_1_18;
  wire Shifter_2_19 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_21
           : io_Op == 4'h8 ? Shifter_1_17 : Shifter_1_19)
      : Shifter_1_19;
  wire Shifter_2_20 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_22
           : io_Op == 4'h8 ? Shifter_1_18 : Shifter_1_20)
      : Shifter_1_20;
  wire Shifter_2_21 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_23
           : io_Op == 4'h8 ? Shifter_1_19 : Shifter_1_21)
      : Shifter_1_21;
  wire Shifter_2_22 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_24
           : io_Op == 4'h8 ? Shifter_1_20 : Shifter_1_22)
      : Shifter_1_22;
  wire Shifter_2_23 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_25
           : io_Op == 4'h8 ? Shifter_1_21 : Shifter_1_23)
      : Shifter_1_23;
  wire Shifter_2_24 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_26
           : io_Op == 4'h8 ? Shifter_1_22 : Shifter_1_24)
      : Shifter_1_24;
  wire Shifter_2_25 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_27
           : io_Op == 4'h8 ? Shifter_1_23 : Shifter_1_25)
      : Shifter_1_25;
  wire Shifter_2_26 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_28
           : io_Op == 4'h8 ? Shifter_1_24 : Shifter_1_26)
      : Shifter_1_26;
  wire Shifter_2_27 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_29
           : io_Op == 4'h8 ? Shifter_1_25 : Shifter_1_27)
      : Shifter_1_27;
  wire Shifter_2_28 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_30
           : io_Op == 4'h8 ? Shifter_1_26 : Shifter_1_28)
      : Shifter_1_28;
  wire Shifter_2_29 =
    io_B[1]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_1_31
           : io_Op == 4'h8 ? Shifter_1_27 : Shifter_1_29)
      : Shifter_1_29;
  wire Shifter_2_30 =
    io_B[1]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_1_28 : Shifter_1_30))
      : Shifter_1_30;
  wire Shifter_2_31 =
    io_B[1]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_1_29 : Shifter_1_31))
      : Shifter_1_31;
  wire Shifter_3_0 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_2_4 : _GEN & Shifter_2_0)
      : Shifter_2_0;
  wire Shifter_3_1 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_2_5 : _GEN & Shifter_2_1)
      : Shifter_2_1;
  wire Shifter_3_2 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_2_6 : _GEN & Shifter_2_2)
      : Shifter_2_2;
  wire Shifter_3_3 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_2_7 : _GEN & Shifter_2_3)
      : Shifter_2_3;
  wire Shifter_3_4 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_8
           : io_Op == 4'h8 ? Shifter_2_0 : Shifter_2_4)
      : Shifter_2_4;
  wire Shifter_3_5 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_9
           : io_Op == 4'h8 ? Shifter_2_1 : Shifter_2_5)
      : Shifter_2_5;
  wire Shifter_3_6 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_10
           : io_Op == 4'h8 ? Shifter_2_2 : Shifter_2_6)
      : Shifter_2_6;
  wire Shifter_3_7 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_11
           : io_Op == 4'h8 ? Shifter_2_3 : Shifter_2_7)
      : Shifter_2_7;
  wire Shifter_3_8 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_12
           : io_Op == 4'h8 ? Shifter_2_4 : Shifter_2_8)
      : Shifter_2_8;
  wire Shifter_3_9 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_13
           : io_Op == 4'h8 ? Shifter_2_5 : Shifter_2_9)
      : Shifter_2_9;
  wire Shifter_3_10 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_14
           : io_Op == 4'h8 ? Shifter_2_6 : Shifter_2_10)
      : Shifter_2_10;
  wire Shifter_3_11 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_15
           : io_Op == 4'h8 ? Shifter_2_7 : Shifter_2_11)
      : Shifter_2_11;
  wire Shifter_3_12 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_16
           : io_Op == 4'h8 ? Shifter_2_8 : Shifter_2_12)
      : Shifter_2_12;
  wire Shifter_3_13 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_17
           : io_Op == 4'h8 ? Shifter_2_9 : Shifter_2_13)
      : Shifter_2_13;
  wire Shifter_3_14 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_18
           : io_Op == 4'h8 ? Shifter_2_10 : Shifter_2_14)
      : Shifter_2_14;
  wire Shifter_3_15 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_19
           : io_Op == 4'h8 ? Shifter_2_11 : Shifter_2_15)
      : Shifter_2_15;
  wire Shifter_3_16 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_20
           : io_Op == 4'h8 ? Shifter_2_12 : Shifter_2_16)
      : Shifter_2_16;
  wire Shifter_3_17 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_21
           : io_Op == 4'h8 ? Shifter_2_13 : Shifter_2_17)
      : Shifter_2_17;
  wire Shifter_3_18 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_22
           : io_Op == 4'h8 ? Shifter_2_14 : Shifter_2_18)
      : Shifter_2_18;
  wire Shifter_3_19 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_23
           : io_Op == 4'h8 ? Shifter_2_15 : Shifter_2_19)
      : Shifter_2_19;
  wire Shifter_3_20 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_24
           : io_Op == 4'h8 ? Shifter_2_16 : Shifter_2_20)
      : Shifter_2_20;
  wire Shifter_3_21 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_25
           : io_Op == 4'h8 ? Shifter_2_17 : Shifter_2_21)
      : Shifter_2_21;
  wire Shifter_3_22 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_26
           : io_Op == 4'h8 ? Shifter_2_18 : Shifter_2_22)
      : Shifter_2_22;
  wire Shifter_3_23 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_27
           : io_Op == 4'h8 ? Shifter_2_19 : Shifter_2_23)
      : Shifter_2_23;
  wire Shifter_3_24 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_28
           : io_Op == 4'h8 ? Shifter_2_20 : Shifter_2_24)
      : Shifter_2_24;
  wire Shifter_3_25 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_29
           : io_Op == 4'h8 ? Shifter_2_21 : Shifter_2_25)
      : Shifter_2_25;
  wire Shifter_3_26 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_30
           : io_Op == 4'h8 ? Shifter_2_22 : Shifter_2_26)
      : Shifter_2_26;
  wire Shifter_3_27 =
    io_B[2]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_2_31
           : io_Op == 4'h8 ? Shifter_2_23 : Shifter_2_27)
      : Shifter_2_27;
  wire Shifter_3_28 =
    io_B[2]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_2_24 : Shifter_2_28))
      : Shifter_2_28;
  wire Shifter_3_29 =
    io_B[2]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_2_25 : Shifter_2_29))
      : Shifter_2_29;
  wire Shifter_3_30 =
    io_B[2]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_2_26 : Shifter_2_30))
      : Shifter_2_30;
  wire Shifter_3_31 =
    io_B[2]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_2_27 : Shifter_2_31))
      : Shifter_2_31;
  wire Shifter_4_0 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_8 : _GEN & Shifter_3_0)
      : Shifter_3_0;
  wire Shifter_4_1 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_9 : _GEN & Shifter_3_1)
      : Shifter_3_1;
  wire Shifter_4_2 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_10 : _GEN & Shifter_3_2)
      : Shifter_3_2;
  wire Shifter_4_3 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_11 : _GEN & Shifter_3_3)
      : Shifter_3_3;
  wire Shifter_4_4 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_12 : _GEN & Shifter_3_4)
      : Shifter_3_4;
  wire Shifter_4_5 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_13 : _GEN & Shifter_3_5)
      : Shifter_3_5;
  wire Shifter_4_6 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_14 : _GEN & Shifter_3_6)
      : Shifter_3_6;
  wire Shifter_4_7 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_3_15 : _GEN & Shifter_3_7)
      : Shifter_3_7;
  wire Shifter_4_8 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_16
           : io_Op == 4'h8 ? Shifter_3_0 : Shifter_3_8)
      : Shifter_3_8;
  wire Shifter_4_9 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_17
           : io_Op == 4'h8 ? Shifter_3_1 : Shifter_3_9)
      : Shifter_3_9;
  wire Shifter_4_10 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_18
           : io_Op == 4'h8 ? Shifter_3_2 : Shifter_3_10)
      : Shifter_3_10;
  wire Shifter_4_11 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_19
           : io_Op == 4'h8 ? Shifter_3_3 : Shifter_3_11)
      : Shifter_3_11;
  wire Shifter_4_12 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_20
           : io_Op == 4'h8 ? Shifter_3_4 : Shifter_3_12)
      : Shifter_3_12;
  wire Shifter_4_13 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_21
           : io_Op == 4'h8 ? Shifter_3_5 : Shifter_3_13)
      : Shifter_3_13;
  wire Shifter_4_14 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_22
           : io_Op == 4'h8 ? Shifter_3_6 : Shifter_3_14)
      : Shifter_3_14;
  wire Shifter_4_15 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_23
           : io_Op == 4'h8 ? Shifter_3_7 : Shifter_3_15)
      : Shifter_3_15;
  wire Shifter_4_16 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_24
           : io_Op == 4'h8 ? Shifter_3_8 : Shifter_3_16)
      : Shifter_3_16;
  wire Shifter_4_17 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_25
           : io_Op == 4'h8 ? Shifter_3_9 : Shifter_3_17)
      : Shifter_3_17;
  wire Shifter_4_18 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_26
           : io_Op == 4'h8 ? Shifter_3_10 : Shifter_3_18)
      : Shifter_3_18;
  wire Shifter_4_19 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_27
           : io_Op == 4'h8 ? Shifter_3_11 : Shifter_3_19)
      : Shifter_3_19;
  wire Shifter_4_20 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_28
           : io_Op == 4'h8 ? Shifter_3_12 : Shifter_3_20)
      : Shifter_3_20;
  wire Shifter_4_21 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_29
           : io_Op == 4'h8 ? Shifter_3_13 : Shifter_3_21)
      : Shifter_3_21;
  wire Shifter_4_22 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_30
           : io_Op == 4'h8 ? Shifter_3_14 : Shifter_3_22)
      : Shifter_3_22;
  wire Shifter_4_23 =
    io_B[3]
      ? (io_Op == 4'hA | io_Op == 4'h9
           ? Shifter_3_31
           : io_Op == 4'h8 ? Shifter_3_15 : Shifter_3_23)
      : Shifter_3_23;
  wire Shifter_4_24 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_16 : Shifter_3_24))
      : Shifter_3_24;
  wire Shifter_4_25 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_17 : Shifter_3_25))
      : Shifter_3_25;
  wire Shifter_4_26 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_18 : Shifter_3_26))
      : Shifter_3_26;
  wire Shifter_4_27 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_19 : Shifter_3_27))
      : Shifter_3_27;
  wire Shifter_4_28 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_20 : Shifter_3_28))
      : Shifter_3_28;
  wire Shifter_4_29 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_21 : Shifter_3_29))
      : Shifter_3_29;
  wire Shifter_4_30 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_22 : Shifter_3_30))
      : Shifter_3_30;
  wire Shifter_4_31 =
    io_B[3]
      ? (io_Op == 4'hA
           ? io_A[31]
           : _GEN_0 & (io_Op == 4'h8 ? Shifter_3_23 : Shifter_3_31))
      : Shifter_3_31;
  assign io_Out =
    {io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_15 : Shifter_4_31))
       : Shifter_4_31,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_14 : Shifter_4_30))
       : Shifter_4_30,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_13 : Shifter_4_29))
       : Shifter_4_29,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_12 : Shifter_4_28))
       : Shifter_4_28,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_11 : Shifter_4_27))
       : Shifter_4_27,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_10 : Shifter_4_26))
       : Shifter_4_26,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_9 : Shifter_4_25))
       : Shifter_4_25,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_8 : Shifter_4_24))
       : Shifter_4_24,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_7 : Shifter_4_23))
       : Shifter_4_23,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_6 : Shifter_4_22))
       : Shifter_4_22,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_5 : Shifter_4_21))
       : Shifter_4_21,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_4 : Shifter_4_20))
       : Shifter_4_20,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_3 : Shifter_4_19))
       : Shifter_4_19,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_2 : Shifter_4_18))
       : Shifter_4_18,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_1 : Shifter_4_17))
       : Shifter_4_17,
     io_B[4]
       ? (io_Op == 4'hA
            ? io_A[31]
            : _GEN_0 & (io_Op == 4'h8 ? Shifter_4_0 : Shifter_4_16))
       : Shifter_4_16,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_31 : _GEN & Shifter_4_15)
       : Shifter_4_15,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_30 : _GEN & Shifter_4_14)
       : Shifter_4_14,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_29 : _GEN & Shifter_4_13)
       : Shifter_4_13,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_28 : _GEN & Shifter_4_12)
       : Shifter_4_12,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_27 : _GEN & Shifter_4_11)
       : Shifter_4_11,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_26 : _GEN & Shifter_4_10)
       : Shifter_4_10,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_25 : _GEN & Shifter_4_9)
       : Shifter_4_9,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_24 : _GEN & Shifter_4_8)
       : Shifter_4_8,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_23 : _GEN & Shifter_4_7)
       : Shifter_4_7,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_22 : _GEN & Shifter_4_6)
       : Shifter_4_6,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_21 : _GEN & Shifter_4_5)
       : Shifter_4_5,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_20 : _GEN & Shifter_4_4)
       : Shifter_4_4,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_19 : _GEN & Shifter_4_3)
       : Shifter_4_3,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_18 : _GEN & Shifter_4_2)
       : Shifter_4_2,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_17 : _GEN & Shifter_4_1)
       : Shifter_4_1,
     io_B[4]
       ? (io_Op == 4'hA | io_Op == 4'h9 ? Shifter_4_16 : _GEN & Shifter_4_0)
       : Shifter_4_0};
endmodule

module alu(
  input  [31:0] io_A,
                io_B,
  input  [3:0]  io_Op,
  output [31:0] io_Out
);

  wire [31:0] _Shifter_io_Out;
  reg  [33:0] casez_tmp;
  wire        Sub = io_Op == 4'h3 | io_Op == 4'h2 | io_Op == 4'h1;
  wire [31:0] FixB = io_B ^ {32{Sub}};
  wire [33:0] FixSum = {1'h0, {1'h0, io_A} + {1'h0, FixB}} + {33'h0, Sub};
  wire [31:0] _io_Out_T_5 = io_A | io_B;
  wire [33:0] _GEN = {2'h0, _Shifter_io_Out};
  always_comb begin
    casez (io_Op)
      4'b0000:
        casez_tmp = FixSum;
      4'b0001:
        casez_tmp = FixSum;
      4'b0010:
        casez_tmp =
          {33'h0, FixSum[31] ^ (io_A[31] ^ ~(FixB[31])) & (FixSum[31] ^ io_A[31])};
      4'b0011:
        casez_tmp = {33'h0, ~(FixSum[32])};
      4'b0100:
        casez_tmp = {2'h0, io_A & io_B};
      4'b0101:
        casez_tmp = {2'h0, _io_Out_T_5};
      4'b0110:
        casez_tmp = {2'h0, io_A ^ io_B};
      4'b0111:
        casez_tmp = {2'h0, ~_io_Out_T_5};
      4'b1000:
        casez_tmp = _GEN;
      4'b1001:
        casez_tmp = _GEN;
      4'b1010:
        casez_tmp = _GEN;
      4'b1011:
        casez_tmp = 34'h0;
      4'b1100:
        casez_tmp = 34'h0;
      4'b1101:
        casez_tmp = 34'h0;
      4'b1110:
        casez_tmp = 34'h0;
      default:
        casez_tmp = 34'h0;
    endcase
  end // always_comb
  bshifter Shifter (
    .io_A   (io_A),
    .io_B   (io_B[4:0]),
    .io_Op  (io_Op),
    .io_Out (_Shifter_io_Out)
  );
  assign io_Out = casez_tmp[31:0];
endmodule

module exu(
  input         clock,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [3:0]  io_prev_bits_branchOp,
                io_prev_bits_aluOp,
  input  [1:0]  io_prev_bits_aluAsrc,
  input  [2:0]  io_prev_bits_aluBsrc,
  input  [3:0]  io_prev_bits_memOp,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [2:0]  io_prev_bits_FwEX_RJ,
                io_prev_bits_FwEX_RK,
                io_prev_bits_FwEX_RD,
  input  [31:0] io_prev_bits_Imm,
  input  [4:0]  io_prev_bits_rd,
  input  [31:0] io_prev_bits_rd_data,
                io_prev_bits_rj_data,
                io_prev_bits_rk_data,
                io_prev_bits_pc,
                io_prev_bits_npc,
  input         io_next_ready,
  output        io_next_valid,
  output [31:0] io_next_bits_ALUOut,
  output [3:0]  io_next_bits_memOp,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [4:0]  io_next_bits_rd,
  output [31:0] io_next_bits_rd_data,
  output        io_bru_valid,
                io_bru_bits_Zero,
                io_bru_bits_SLess,
                io_bru_bits_ULess,
  output [3:0]  io_bru_bits_branchOp,
  output [31:0] io_bru_bits_pcadd4,
                io_bru_bits_pcoff,
                io_bru_bits_jirlpc,
                io_bru_bits_pc,
                io_bru_bits_npc,
  input         io_stall,
  output [31:0] io_MulOut,
  output [4:0]  io_ex_Dst,
  output [1:0]  io_ex_Sel,
  input  [31:0] io_ls_ALU,
                io_wb_ALU,
                io_wb_Mem
);

  wire [63:0] _mult_io_S;
  wire [63:0] ForwardRJ =
    io_prev_bits_FwEX_RJ == 3'h3
      ? _mult_io_S
      : {32'h0,
         io_prev_bits_FwEX_RJ == 3'h2
           ? io_wb_Mem
           : io_prev_bits_FwEX_RJ == 3'h1
               ? io_wb_ALU
               : io_prev_bits_FwEX_RJ == 3'h0 ? io_ls_ALU : io_prev_bits_rj_data};
  wire [63:0] ForwardRD =
    io_prev_bits_FwEX_RD == 3'h3
      ? _mult_io_S
      : {32'h0,
         io_prev_bits_FwEX_RD == 3'h2
           ? io_wb_Mem
           : io_prev_bits_FwEX_RD == 3'h1
               ? io_wb_ALU
               : io_prev_bits_FwEX_RD == 3'h0 ? io_ls_ALU : io_prev_bits_rd_data};
  wire [31:0] ALUA =
    io_prev_bits_aluAsrc == 2'h1
      ? io_prev_bits_pc
      : io_prev_bits_aluAsrc == 2'h0 ? ForwardRJ[31:0] : 32'h0;
  wire [31:0] ALUB =
    io_prev_bits_aluBsrc == 3'h3
      ? 32'h4
      : io_prev_bits_aluBsrc == 3'h2
          ? io_prev_bits_Imm
          : io_prev_bits_aluBsrc == 3'h1
              ? ForwardRD[31:0]
              : io_prev_bits_aluBsrc == 3'h0
                  ? (io_prev_bits_FwEX_RK == 3'h3
                       ? _mult_io_S[31:0]
                       : io_prev_bits_FwEX_RK == 3'h2
                           ? io_wb_Mem
                           : io_prev_bits_FwEX_RK == 3'h1
                               ? io_wb_ALU
                               : io_prev_bits_FwEX_RK == 3'h0
                                   ? io_ls_ALU
                                   : io_prev_bits_rk_data)
                  : 32'h0;
  wallace mult (
    .clock    (clock),
    .io_stall (io_stall),
    .io_A     (ALUA),
    .io_B     (ALUB),
    .io_S     (_mult_io_S)
  );
  alu ALU (
    .io_A   (ALUA),
    .io_B   (ALUB),
    .io_Op  (io_prev_bits_aluOp),
    .io_Out (io_next_bits_ALUOut)
  );
  assign io_prev_ready = io_next_ready;
  assign io_next_valid = io_prev_valid;
  assign io_next_bits_memOp = io_prev_bits_memOp;
  assign io_next_bits_wbSel = io_prev_bits_wbSel;
  assign io_next_bits_wbDst = io_prev_bits_wbDst;
  assign io_next_bits_rd = io_prev_bits_rd;
  assign io_next_bits_rd_data = ForwardRD[31:0];
  assign io_bru_valid = io_prev_valid & io_next_ready;
  assign io_bru_bits_Zero = (ForwardRJ ^ ForwardRD) == 64'h0;
  assign io_bru_bits_SLess = $signed(ForwardRJ) < $signed(ForwardRD);
  assign io_bru_bits_ULess = ForwardRJ < ForwardRD;
  assign io_bru_bits_branchOp = io_prev_bits_branchOp;
  assign io_bru_bits_pcadd4 = io_prev_bits_pc + 32'h4;
  assign io_bru_bits_pcoff = io_prev_bits_pc + io_prev_bits_Imm;
  assign io_bru_bits_jirlpc = ForwardRJ[31:0] + io_prev_bits_Imm;
  assign io_bru_bits_pc = io_prev_bits_pc;
  assign io_bru_bits_npc = io_prev_bits_npc;
  assign io_MulOut = _mult_io_S[31:0];
  assign io_ex_Dst =
    io_prev_valid
      ? (io_prev_bits_wbDst == 2'h1
           ? 5'h1
           : io_prev_bits_wbDst == 2'h0 ? io_prev_bits_rd : 5'h0)
      : 5'h0;
  assign io_ex_Sel = io_prev_bits_wbSel;
endmodule

module buffer_2(
  input         clock,
                reset,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [31:0] io_prev_bits_ALUOut,
  input  [3:0]  io_prev_bits_memOp,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [4:0]  io_prev_bits_rd,
  input  [31:0] io_prev_bits_rd_data,
  input         io_next_ready,
  output        io_next_valid,
  output [31:0] io_next_bits_ALUOut,
  output [3:0]  io_next_bits_memOp,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [4:0]  io_next_bits_rd,
  output [31:0] io_next_bits_rd_data,
  input         io_stall,
                io_flush
);

  reg         state;
  reg  [31:0] regs_ALUOut;
  reg  [3:0]  regs_memOp;
  reg  [1:0]  regs_wbSel;
  reg  [1:0]  regs_wbDst;
  reg  [4:0]  regs_rd;
  reg  [31:0] regs_rd_data;
  wire        _GEN = state & ~io_next_ready | io_stall;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else
      state <= ~io_flush & (_GEN ? state : io_prev_valid);
    if (io_flush | _GEN | ~io_prev_valid) begin
    end
    else begin
      regs_ALUOut <= io_prev_bits_ALUOut;
      regs_memOp <= io_prev_bits_memOp;
      regs_wbSel <= io_prev_bits_wbSel;
      regs_wbDst <= io_prev_bits_wbDst;
      regs_rd <= io_prev_bits_rd;
      regs_rd_data <= io_prev_bits_rd_data;
    end
  end // always @(posedge)
  assign io_prev_ready = ~io_flush & ~_GEN;
  assign io_next_valid = state;
  assign io_next_bits_ALUOut = regs_ALUOut;
  assign io_next_bits_memOp = regs_memOp;
  assign io_next_bits_wbSel = regs_wbSel;
  assign io_next_bits_wbDst = regs_wbDst;
  assign io_next_bits_rd = regs_rd;
  assign io_next_bits_rd_data = regs_rd_data;
endmodule

module buffer_3(
  input         clock,
                reset,
                io_prev_valid,
                io_prev_bits_Zero,
                io_prev_bits_SLess,
                io_prev_bits_ULess,
  input  [3:0]  io_prev_bits_branchOp,
  input  [31:0] io_prev_bits_pcadd4,
                io_prev_bits_pcoff,
                io_prev_bits_jirlpc,
                io_prev_bits_pc,
                io_prev_bits_npc,
  output        io_next_valid,
                io_next_bits_Zero,
                io_next_bits_SLess,
                io_next_bits_ULess,
  output [3:0]  io_next_bits_branchOp,
  output [31:0] io_next_bits_pcadd4,
                io_next_bits_pcoff,
                io_next_bits_jirlpc,
                io_next_bits_pc,
                io_next_bits_npc,
  input         io_stall,
                io_flush
);

  reg        state;
  reg        regs_Zero;
  reg        regs_SLess;
  reg        regs_ULess;
  reg [3:0]  regs_branchOp;
  reg [31:0] regs_pcadd4;
  reg [31:0] regs_pcoff;
  reg [31:0] regs_jirlpc;
  reg [31:0] regs_pc;
  reg [31:0] regs_npc;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else
      state <= ~io_flush & (io_stall ? state : io_prev_valid);
    if (io_flush | io_stall | ~io_prev_valid) begin
    end
    else begin
      regs_Zero <= io_prev_bits_Zero;
      regs_SLess <= io_prev_bits_SLess;
      regs_ULess <= io_prev_bits_ULess;
      regs_branchOp <= io_prev_bits_branchOp;
      regs_pcadd4 <= io_prev_bits_pcadd4;
      regs_pcoff <= io_prev_bits_pcoff;
      regs_jirlpc <= io_prev_bits_jirlpc;
      regs_pc <= io_prev_bits_pc;
      regs_npc <= io_prev_bits_npc;
    end
  end // always @(posedge)
  assign io_next_valid = state;
  assign io_next_bits_Zero = regs_Zero;
  assign io_next_bits_SLess = regs_SLess;
  assign io_next_bits_ULess = regs_ULess;
  assign io_next_bits_branchOp = regs_branchOp;
  assign io_next_bits_pcadd4 = regs_pcadd4;
  assign io_next_bits_pcoff = regs_pcoff;
  assign io_next_bits_jirlpc = regs_jirlpc;
  assign io_next_bits_pc = regs_pc;
  assign io_next_bits_npc = regs_npc;
endmodule

module lsu(
  input         clock,
                reset,
  input  [31:0] io_ext_in_bits_data_out,
  output        io_ext_out_valid,
                io_ext_out_bits_data_wen,
  output [31:0] io_ext_out_bits_data_in,
                io_ext_out_bits_addr,
  output [3:0]  io_ext_out_bits_be_n,
  output        io_ext_out_bits_oe_n,
                io_ext_out_bits_we_n,
                io_prev_ready,
  input         io_prev_valid,
  input  [31:0] io_prev_bits_ALUOut,
  input  [3:0]  io_prev_bits_memOp,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [4:0]  io_prev_bits_rd,
  input  [31:0] io_prev_bits_rd_data,
  input         io_next_ready,
  output        io_next_valid,
  output [31:0] io_next_bits_MemOut,
                io_next_bits_ALUOut,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [4:0]  io_next_bits_rd,
  output        io_stall,
  output [4:0]  io_ls_Dst,
  output [1:0]  io_ls_Sel,
  output [31:0] io_ls_ALU
);

  wire        Writevalid =
    io_prev_valid
    & (io_prev_bits_memOp == 4'h7 | io_prev_bits_memOp == 4'h6
       | io_prev_bits_memOp == 4'h5);
  wire        Readvalid =
    io_prev_valid
    & (io_prev_bits_memOp == 4'h4 | io_prev_bits_memOp == 4'h3
       | io_prev_bits_memOp == 4'h2 | io_prev_bits_memOp == 4'h1
       | ~(|io_prev_bits_memOp));
  reg  [3:0]  casez_tmp;
  always_comb begin
    casez (io_prev_bits_ALUOut[1:0])
      2'b00:
        casez_tmp = 4'hE;
      2'b01:
        casez_tmp = 4'hD;
      2'b10:
        casez_tmp = 4'hB;
      default:
        casez_tmp = 4'h7;
    endcase
  end // always_comb
  wire [3:0]  GenMask =
    io_prev_bits_memOp == 4'h7
      ? 4'h0
      : io_prev_bits_memOp == 4'h6
          ? (io_prev_bits_ALUOut[1] ? 4'h3 : 4'hC)
          : io_prev_bits_memOp == 4'h5 ? casez_tmp : 4'h0;
  reg  [31:0] casez_tmp_0;
  always_comb begin
    casez (io_prev_bits_ALUOut[1:0])
      2'b00:
        casez_tmp_0 = {24'h0, io_prev_bits_rd_data[7:0]};
      2'b01:
        casez_tmp_0 = {16'h0, io_prev_bits_rd_data[7:0], 8'h0};
      2'b10:
        casez_tmp_0 = {8'h0, io_prev_bits_rd_data[7:0], 16'h0};
      default:
        casez_tmp_0 = {io_prev_bits_rd_data[7:0], 24'h0};
    endcase
  end // always_comb
  wire [31:0] GenData =
    io_prev_bits_memOp == 4'h7
      ? io_prev_bits_rd_data
      : io_prev_bits_memOp == 4'h6
          ? (io_prev_bits_ALUOut[1]
               ? {io_prev_bits_rd_data[15:0], 16'h0}
               : {16'h0, io_prev_bits_rd_data[15:0]})
          : io_prev_bits_memOp == 4'h5 ? casez_tmp_0 : 32'h0;
  reg  [31:0] wq_0_addr;
  reg  [31:0] wq_0_data;
  reg  [3:0]  wq_0_be_n;
  reg  [1:0]  wq_0_op;
  reg  [31:0] wq_1_addr;
  reg  [31:0] wq_1_data;
  reg  [3:0]  wq_1_be_n;
  reg  [1:0]  wq_1_op;
  reg  [31:0] wq_2_addr;
  reg  [31:0] wq_2_data;
  reg  [3:0]  wq_2_be_n;
  reg  [1:0]  wq_2_op;
  reg  [31:0] wq_3_addr;
  reg  [31:0] wq_3_data;
  reg  [3:0]  wq_3_be_n;
  reg  [1:0]  wq_3_op;
  reg         wq_valid_0;
  reg         wq_valid_1;
  reg         wq_valid_2;
  reg         wq_valid_3;
  reg  [1:0]  wq_state;
  reg  [1:0]  wq_ptr;
  reg         casez_tmp_1;
  always_comb begin
    casez (wq_ptr)
      2'b00:
        casez_tmp_1 = wq_valid_0;
      2'b01:
        casez_tmp_1 = wq_valid_1;
      2'b10:
        casez_tmp_1 = wq_valid_2;
      default:
        casez_tmp_1 = wq_valid_3;
    endcase
  end // always_comb
  wire        wq_full = (&wq_ptr) & casez_tmp_1;
  wire [1:0]  newdata_op =
    io_prev_bits_memOp == 4'h7 ? 2'h2 : {1'h0, io_prev_bits_memOp == 4'h6};
  wire        hit_1 =
    wq_valid_1 & (wq_1_addr ^ io_prev_bits_ALUOut) == 32'h0
    & (io_prev_bits_memOp == 4'h4
         ? wq_1_op == 2'h2
         : io_prev_bits_memOp == 4'h3
             ? (|wq_1_op)
             : io_prev_bits_memOp == 4'h2
                 ? (|wq_1_op)
                 : io_prev_bits_memOp == 4'h1 | ~(|io_prev_bits_memOp));
  wire        hit_2 =
    wq_valid_2 & (wq_2_addr ^ io_prev_bits_ALUOut) == 32'h0
    & (io_prev_bits_memOp == 4'h4
         ? wq_2_op == 2'h2
         : io_prev_bits_memOp == 4'h3
             ? (|wq_2_op)
             : io_prev_bits_memOp == 4'h2
                 ? (|wq_2_op)
                 : io_prev_bits_memOp == 4'h1 | ~(|io_prev_bits_memOp));
  wire        hit_3 =
    wq_valid_3 & (wq_3_addr ^ io_prev_bits_ALUOut) == 32'h0
    & (io_prev_bits_memOp == 4'h4
         ? wq_3_op == 2'h2
         : io_prev_bits_memOp == 4'h3
             ? (|wq_3_op)
             : io_prev_bits_memOp == 4'h2
                 ? (|wq_3_op)
                 : io_prev_bits_memOp == 4'h1 | ~(|io_prev_bits_memOp));
  wire [1:0]  _hit_index_T_2 = hit_3 ? 2'h0 : hit_2 ? 2'h1 : {1'h1, ~hit_1};
  wire        _GEN = wq_state == 2'h1;
  wire        _GEN_0 = Writevalid & ~wq_full & wq_ptr == 2'h0;
  wire        _GEN_1 = Writevalid & ~wq_full & wq_ptr == 2'h1;
  wire        _GEN_2 = Writevalid & ~wq_full & wq_ptr == 2'h2;
  wire        _GEN_3 = Writevalid & ~wq_full & (&wq_ptr);
  reg         casez_tmp_2;
  always_comb begin
    casez (~_hit_index_T_2)
      2'b00:
        casez_tmp_2 =
          wq_valid_0 & (wq_0_addr ^ io_prev_bits_ALUOut) == 32'h0
          & (io_prev_bits_memOp == 4'h4
               ? wq_0_op == 2'h2
               : io_prev_bits_memOp == 4'h3
                   ? (|wq_0_op)
                   : io_prev_bits_memOp == 4'h2
                       ? (|wq_0_op)
                       : io_prev_bits_memOp == 4'h1 | ~(|io_prev_bits_memOp));
      2'b01:
        casez_tmp_2 = hit_1;
      2'b10:
        casez_tmp_2 = hit_2;
      default:
        casez_tmp_2 = hit_3;
    endcase
  end // always_comb
  wire        _GEN_4 = wq_state == 2'h2;
  wire        _GEN_5 = ~wq_full & {wq_ptr[1], ~(wq_ptr[0])} == 2'h0;
  wire        _GEN_6 = ~wq_full & wq_ptr == 2'h2;
  wire        _GEN_7 = ~wq_full & (&wq_ptr);
  wire        wq_stall =
    _GEN
      ? (Writevalid ? wq_full : Readvalid & ~casez_tmp_2)
      : _GEN_4
          ? (Writevalid ? wq_full : Readvalid & ~casez_tmp_2)
          : (&wq_state) & ~Writevalid & Readvalid & ~casez_tmp_2;
  reg  [1:0]  casez_tmp_3;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_3 = wq_state;
      2'b01:
        casez_tmp_3 =
          Writevalid | ~(Readvalid | wq_ptr == 2'h0 & ~wq_valid_0) ? 2'h2 : 2'h1;
      2'b10:
        casez_tmp_3 = Writevalid ? 2'h3 : {~Readvalid, 1'h1};
      default:
        casez_tmp_3 =
          Writevalid | ~(Readvalid | {wq_ptr[1], ~(wq_ptr[0])} == 2'h0) ? 2'h2 : 2'h1;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_4;
  wire [31:0] _GEN_8 = _GEN_0 ? io_prev_bits_ALUOut : wq_0_addr;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_4 = wq_0_addr;
      2'b01:
        casez_tmp_4 = _GEN_8;
      2'b10:
        casez_tmp_4 = _GEN_8;
      default:
        casez_tmp_4 =
          Writevalid
            ? (_GEN_5 ? io_prev_bits_ALUOut : wq_1_addr)
            : Readvalid ? wq_0_addr : wq_1_addr;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_5;
  wire [31:0] _GEN_9 = _GEN_0 ? GenData : wq_0_data;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_5 = wq_0_data;
      2'b01:
        casez_tmp_5 = _GEN_9;
      2'b10:
        casez_tmp_5 = _GEN_9;
      default:
        casez_tmp_5 =
          Writevalid ? (_GEN_5 ? GenData : wq_1_data) : Readvalid ? wq_0_data : wq_1_data;
    endcase
  end // always_comb
  reg  [3:0]  casez_tmp_6;
  wire [3:0]  _GEN_10 = _GEN_0 ? GenMask : wq_0_be_n;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_6 = wq_0_be_n;
      2'b01:
        casez_tmp_6 = _GEN_10;
      2'b10:
        casez_tmp_6 = _GEN_10;
      default:
        casez_tmp_6 =
          Writevalid ? (_GEN_5 ? GenMask : wq_1_be_n) : Readvalid ? wq_0_be_n : wq_1_be_n;
    endcase
  end // always_comb
  reg  [1:0]  casez_tmp_7;
  wire [1:0]  _GEN_11 = _GEN_0 ? newdata_op : wq_0_op;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_7 = wq_0_op;
      2'b01:
        casez_tmp_7 = _GEN_11;
      2'b10:
        casez_tmp_7 = _GEN_11;
      default:
        casez_tmp_7 =
          Writevalid ? (_GEN_5 ? newdata_op : wq_1_op) : Readvalid ? wq_0_op : wq_1_op;
    endcase
  end // always_comb
  reg         casez_tmp_8;
  wire        _GEN_12 = _GEN_0 | wq_valid_0;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_8 = wq_valid_0;
      2'b01:
        casez_tmp_8 = _GEN_12;
      2'b10:
        casez_tmp_8 = _GEN_12;
      default:
        casez_tmp_8 =
          Writevalid ? _GEN_5 | wq_valid_1 : Readvalid ? wq_valid_0 : wq_valid_1;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_9;
  wire [31:0] _GEN_13 = _GEN_1 ? io_prev_bits_ALUOut : wq_1_addr;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_9 = wq_1_addr;
      2'b01:
        casez_tmp_9 = _GEN_13;
      2'b10:
        casez_tmp_9 = _GEN_13;
      default:
        casez_tmp_9 =
          Writevalid
            ? (_GEN_6 ? io_prev_bits_ALUOut : wq_2_addr)
            : Readvalid ? wq_1_addr : wq_2_addr;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_10;
  wire [31:0] _GEN_14 = _GEN_1 ? GenData : wq_1_data;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_10 = wq_1_data;
      2'b01:
        casez_tmp_10 = _GEN_14;
      2'b10:
        casez_tmp_10 = _GEN_14;
      default:
        casez_tmp_10 =
          Writevalid ? (_GEN_6 ? GenData : wq_2_data) : Readvalid ? wq_1_data : wq_2_data;
    endcase
  end // always_comb
  reg  [3:0]  casez_tmp_11;
  wire [3:0]  _GEN_15 = _GEN_1 ? GenMask : wq_1_be_n;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_11 = wq_1_be_n;
      2'b01:
        casez_tmp_11 = _GEN_15;
      2'b10:
        casez_tmp_11 = _GEN_15;
      default:
        casez_tmp_11 =
          Writevalid ? (_GEN_6 ? GenMask : wq_2_be_n) : Readvalid ? wq_1_be_n : wq_2_be_n;
    endcase
  end // always_comb
  reg  [1:0]  casez_tmp_12;
  wire [1:0]  _GEN_16 = _GEN_1 ? newdata_op : wq_1_op;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_12 = wq_1_op;
      2'b01:
        casez_tmp_12 = _GEN_16;
      2'b10:
        casez_tmp_12 = _GEN_16;
      default:
        casez_tmp_12 =
          Writevalid ? (_GEN_6 ? newdata_op : wq_2_op) : Readvalid ? wq_1_op : wq_2_op;
    endcase
  end // always_comb
  reg         casez_tmp_13;
  wire        _GEN_17 = _GEN_1 | wq_valid_1;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_13 = wq_valid_1;
      2'b01:
        casez_tmp_13 = _GEN_17;
      2'b10:
        casez_tmp_13 = _GEN_17;
      default:
        casez_tmp_13 =
          Writevalid ? _GEN_6 | wq_valid_2 : Readvalid ? wq_valid_1 : wq_valid_2;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_14;
  wire [31:0] _GEN_18 = _GEN_2 ? io_prev_bits_ALUOut : wq_2_addr;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_14 = wq_2_addr;
      2'b01:
        casez_tmp_14 = _GEN_18;
      2'b10:
        casez_tmp_14 = _GEN_18;
      default:
        casez_tmp_14 =
          Writevalid
            ? (_GEN_7 ? io_prev_bits_ALUOut : wq_3_addr)
            : Readvalid ? wq_2_addr : wq_3_addr;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_15;
  wire [31:0] _GEN_19 = _GEN_2 ? GenData : wq_2_data;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_15 = wq_2_data;
      2'b01:
        casez_tmp_15 = _GEN_19;
      2'b10:
        casez_tmp_15 = _GEN_19;
      default:
        casez_tmp_15 =
          Writevalid ? (_GEN_7 ? GenData : wq_3_data) : Readvalid ? wq_2_data : wq_3_data;
    endcase
  end // always_comb
  reg  [3:0]  casez_tmp_16;
  wire [3:0]  _GEN_20 = _GEN_2 ? GenMask : wq_2_be_n;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_16 = wq_2_be_n;
      2'b01:
        casez_tmp_16 = _GEN_20;
      2'b10:
        casez_tmp_16 = _GEN_20;
      default:
        casez_tmp_16 =
          Writevalid ? (_GEN_7 ? GenMask : wq_3_be_n) : Readvalid ? wq_2_be_n : wq_3_be_n;
    endcase
  end // always_comb
  reg  [1:0]  casez_tmp_17;
  wire [1:0]  _GEN_21 = _GEN_2 ? newdata_op : wq_2_op;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_17 = wq_2_op;
      2'b01:
        casez_tmp_17 = _GEN_21;
      2'b10:
        casez_tmp_17 = _GEN_21;
      default:
        casez_tmp_17 =
          Writevalid ? (_GEN_7 ? newdata_op : wq_3_op) : Readvalid ? wq_2_op : wq_3_op;
    endcase
  end // always_comb
  reg         casez_tmp_18;
  wire        _GEN_22 = _GEN_2 | wq_valid_2;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_18 = wq_valid_2;
      2'b01:
        casez_tmp_18 = _GEN_22;
      2'b10:
        casez_tmp_18 = _GEN_22;
      default:
        casez_tmp_18 =
          Writevalid ? _GEN_7 | wq_valid_3 : Readvalid ? wq_valid_2 : wq_valid_3;
    endcase
  end // always_comb
  reg         casez_tmp_19;
  wire        _GEN_23 = _GEN_3 | wq_valid_3;
  always_comb begin
    casez (wq_state)
      2'b00:
        casez_tmp_19 = wq_valid_3;
      2'b01:
        casez_tmp_19 = _GEN_23;
      2'b10:
        casez_tmp_19 = _GEN_23;
      default:
        casez_tmp_19 = Writevalid ? wq_full : Readvalid & wq_valid_3;
    endcase
  end // always_comb
  reg         state;
  reg  [31:0] casez_tmp_20;
  always_comb begin
    casez (~_hit_index_T_2)
      2'b00:
        casez_tmp_20 = wq_0_data;
      2'b01:
        casez_tmp_20 = wq_1_data;
      2'b10:
        casez_tmp_20 = wq_2_data;
      default:
        casez_tmp_20 = wq_3_data;
    endcase
  end // always_comb
  wire [31:0] ReadData = state ? io_ext_in_bits_data_out : casez_tmp_20;
  reg  [7:0]  casez_tmp_21;
  always_comb begin
    casez (io_prev_bits_ALUOut[1:0])
      2'b00:
        casez_tmp_21 = ReadData[7:0];
      2'b01:
        casez_tmp_21 = ReadData[15:8];
      2'b10:
        casez_tmp_21 = ReadData[23:16];
      default:
        casez_tmp_21 = ReadData[31:24];
    endcase
  end // always_comb
  wire [15:0] FetchHalf = io_prev_bits_ALUOut[1] ? ReadData[31:16] : ReadData[15:0];
  wire        _GEN_24 = Writevalid & ~wq_full;
  always @(posedge clock) begin
    wq_0_addr <= casez_tmp_4;
    wq_0_data <= casez_tmp_5;
    wq_0_be_n <= casez_tmp_6;
    wq_0_op <= casez_tmp_7;
    wq_1_addr <= casez_tmp_9;
    wq_1_data <= casez_tmp_10;
    wq_1_be_n <= casez_tmp_11;
    wq_1_op <= casez_tmp_12;
    wq_2_addr <= casez_tmp_14;
    wq_2_data <= casez_tmp_15;
    wq_2_be_n <= casez_tmp_16;
    wq_2_op <= casez_tmp_17;
    if (_GEN | _GEN_4 ? _GEN_3 : (&wq_state) & Writevalid) begin
      wq_3_addr <= io_prev_bits_ALUOut;
      wq_3_data <= GenData;
      wq_3_be_n <= GenMask;
      wq_3_op <= newdata_op;
    end
    if (reset) begin
      wq_valid_0 <= 1'h0;
      wq_valid_1 <= 1'h0;
      wq_valid_2 <= 1'h0;
      wq_valid_3 <= 1'h0;
      wq_state <= 2'h1;
      wq_ptr <= 2'h0;
      state <= 1'h0;
    end
    else begin
      wq_valid_0 <= casez_tmp_8;
      wq_valid_1 <= casez_tmp_13;
      wq_valid_2 <= casez_tmp_18;
      wq_valid_3 <= casez_tmp_19;
      wq_state <= casez_tmp_3;
      if (_GEN) begin
        if (~_GEN_24 | (&wq_ptr)) begin
        end
        else
          wq_ptr <= wq_ptr + 2'h1;
      end
      else if (_GEN_4) begin
        if (~_GEN_24 | (&wq_ptr)) begin
        end
        else
          wq_ptr <= wq_ptr + 2'h1;
      end
      else if (~(&wq_state) | Writevalid | Readvalid) begin
      end
      else
        wq_ptr <= wq_ptr - 2'h1;
      state <= ~state & (wq_stall | state);
    end
  end // always @(posedge)
  assign io_ext_out_valid = wq_state[1] | Readvalid;
  assign io_ext_out_bits_data_wen = ~Readvalid;
  assign io_ext_out_bits_data_in = Readvalid ? 32'h0 : wq_0_data;
  assign io_ext_out_bits_addr = Readvalid ? io_prev_bits_ALUOut : wq_0_addr;
  assign io_ext_out_bits_be_n = Readvalid ? 4'h0 : wq_0_be_n;
  assign io_ext_out_bits_oe_n = ~Readvalid;
  assign io_ext_out_bits_we_n = Readvalid;
  assign io_prev_ready = io_next_ready;
  assign io_next_valid = io_prev_valid & (state | ~wq_stall & ~state);
  assign io_next_bits_MemOut =
    io_prev_bits_memOp == 4'h4
      ? ReadData
      : io_prev_bits_memOp == 4'h3
          ? {16'h0, FetchHalf}
          : io_prev_bits_memOp == 4'h2
              ? {{16{FetchHalf[15]}}, FetchHalf}
              : io_prev_bits_memOp == 4'h1
                  ? {24'h0, casez_tmp_21}
                  : (|io_prev_bits_memOp) ? 32'h0 : {{24{casez_tmp_21[7]}}, casez_tmp_21};
  assign io_next_bits_ALUOut = io_prev_bits_ALUOut;
  assign io_next_bits_wbSel = io_prev_bits_wbSel;
  assign io_next_bits_wbDst = io_prev_bits_wbDst;
  assign io_next_bits_rd = io_prev_bits_rd;
  assign io_stall = wq_stall & ~state;
  assign io_ls_Dst =
    io_prev_valid
      ? (io_prev_bits_wbDst == 2'h1
           ? 5'h1
           : io_prev_bits_wbDst == 2'h0 ? io_prev_bits_rd : 5'h0)
      : 5'h0;
  assign io_ls_Sel = io_prev_bits_wbSel;
  assign io_ls_ALU = io_prev_bits_ALUOut;
endmodule

module bru(
  input         io_prev_valid,
                io_prev_bits_Zero,
                io_prev_bits_SLess,
                io_prev_bits_ULess,
  input  [3:0]  io_prev_bits_branchOp,
  input  [31:0] io_prev_bits_pcadd4,
                io_prev_bits_pcoff,
                io_prev_bits_jirlpc,
                io_prev_bits_pc,
                io_prev_bits_npc,
  input         io_stall,
  output        io_flush,
                io_update,
                io_u_branch,
                io_u_type,
  output [31:0] io_u_pc,
                io_u_target,
                io_nextPC
);

  wire        branch =
    io_prev_bits_branchOp == 4'h5
      ? ~io_prev_bits_ULess
      : io_prev_bits_branchOp == 4'h4
          ? io_prev_bits_ULess
          : io_prev_bits_branchOp == 4'h3
              ? ~io_prev_bits_SLess
              : io_prev_bits_branchOp == 4'h2
                  ? io_prev_bits_SLess
                  : io_prev_bits_branchOp == 4'h1
                      ? ~io_prev_bits_Zero
                      : io_prev_bits_branchOp == 4'h0
                          ? io_prev_bits_Zero
                          : io_prev_bits_branchOp == 4'h7 | io_prev_bits_branchOp == 4'h6
                            | io_prev_bits_branchOp == 4'h8;
  wire [31:0] btarget =
    io_prev_bits_branchOp == 4'h8 ? io_prev_bits_jirlpc : io_prev_bits_pcoff;
  wire [31:0] nextPC = branch ? btarget : io_prev_bits_pcadd4;
  assign io_flush = (|(nextPC ^ io_prev_bits_npc)) & io_prev_valid & ~io_stall;
  assign io_update = io_prev_bits_branchOp != 4'h9 & io_prev_valid & ~io_stall;
  assign io_u_branch = branch;
  assign io_u_type =
    ~(io_prev_bits_branchOp == 4'h7 | io_prev_bits_branchOp == 4'h6)
    & io_prev_bits_branchOp != 4'h8;
  assign io_u_pc = io_prev_bits_pc;
  assign io_u_target = btarget;
  assign io_nextPC = nextPC;
endmodule

module buffer_4(
  input         clock,
                reset,
  output        io_prev_ready,
  input         io_prev_valid,
  input  [31:0] io_prev_bits_MemOut,
                io_prev_bits_ALUOut,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [4:0]  io_prev_bits_rd,
  output        io_next_valid,
  output [31:0] io_next_bits_MemOut,
                io_next_bits_ALUOut,
  output [1:0]  io_next_bits_wbSel,
                io_next_bits_wbDst,
  output [4:0]  io_next_bits_rd,
  input         io_stall
);

  reg        state;
  reg [31:0] regs_MemOut;
  reg [31:0] regs_ALUOut;
  reg [1:0]  regs_wbSel;
  reg [1:0]  regs_wbDst;
  reg [4:0]  regs_rd;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else if (io_stall) begin
    end
    else
      state <= io_prev_valid;
    if (io_stall | ~io_prev_valid) begin
    end
    else begin
      regs_MemOut <= io_prev_bits_MemOut;
      regs_ALUOut <= io_prev_bits_ALUOut;
      regs_wbSel <= io_prev_bits_wbSel;
      regs_wbDst <= io_prev_bits_wbDst;
      regs_rd <= io_prev_bits_rd;
    end
  end // always @(posedge)
  assign io_prev_ready = ~io_stall;
  assign io_next_valid = state;
  assign io_next_bits_MemOut = regs_MemOut;
  assign io_next_bits_ALUOut = regs_ALUOut;
  assign io_next_bits_wbSel = regs_wbSel;
  assign io_next_bits_wbDst = regs_wbDst;
  assign io_next_bits_rd = regs_rd;
endmodule

module wbu(
  input         io_prev_valid,
  input  [31:0] io_prev_bits_MemOut,
                io_prev_bits_ALUOut,
  input  [1:0]  io_prev_bits_wbSel,
                io_prev_bits_wbDst,
  input  [4:0]  io_prev_bits_rd,
  output        io_wen,
  output [4:0]  io_waddr,
  output [31:0] io_wdata,
  input         io_stall,
  input  [31:0] io_MulOut,
  output [4:0]  io_wb_Dst,
  output [1:0]  io_wb_Sel,
  output [31:0] io_wb_ALU,
                io_wb_Mem
);

  reg [31:0] casez_tmp;
  always_comb begin
    casez (io_prev_bits_wbSel)
      2'b00:
        casez_tmp = io_prev_bits_ALUOut;
      2'b01:
        casez_tmp = io_prev_bits_MemOut;
      2'b10:
        casez_tmp = io_MulOut;
      default:
        casez_tmp = 32'h0;
    endcase
  end // always_comb
  assign io_wen = io_prev_bits_wbSel != 2'h3 & io_prev_valid & ~io_stall;
  assign io_waddr =
    io_prev_bits_wbDst == 2'h1 ? 5'h1 : (|io_prev_bits_wbDst) ? 5'h0 : io_prev_bits_rd;
  assign io_wdata = casez_tmp;
  assign io_wb_Dst =
    io_prev_valid
      ? (io_prev_bits_wbDst == 2'h1
           ? 5'h1
           : (|io_prev_bits_wbDst) ? 5'h0 : io_prev_bits_rd)
      : 5'h0;
  assign io_wb_Sel = io_prev_bits_wbSel;
  assign io_wb_ALU = io_prev_bits_ALUOut;
  assign io_wb_Mem = io_prev_bits_MemOut;
endmodule

module forward(
  input  [4:0] io_RJ,
               io_RK,
               io_RD,
               io_ex_Dst,
               io_ls_Dst,
               io_wb_Dst,
  input  [1:0] io_ex_Sel,
               io_ls_Sel,
               io_wb_Sel,
  output       io_stall,
  output [2:0] io_FwID_RJ,
               io_FwID_RK,
               io_FwID_RD,
               io_FwEX_RJ,
               io_FwEX_RK,
               io_FwEX_RD
);

  wire       _FwRJ_T_2 = io_RJ == 5'h0;
  wire [4:0] _FwRJ_T_73 = io_RJ ^ io_ex_Dst;
  wire [4:0] _FwRJ_T_94 = io_RJ ^ io_ls_Dst;
  wire [4:0] _FwRJ_T_115 = io_RJ ^ io_wb_Dst;
  wire [2:0] _FwRJ_T_68 =
    _FwRJ_T_73 == 5'h0
      ? {2'h2,
         ~(io_ex_Sel == 2'h0 | {io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0
           | io_ex_Sel == 2'h2)}
      : _FwRJ_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h0
               : {2'h2, ~({io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0 | io_ls_Sel == 2'h2)})
          : _FwRJ_T_115 == 5'h0
              ? (io_wb_Sel == 2'h0
                   ? 3'h1
                   : {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                       ? 3'h2
                       : io_wb_Sel == 2'h2 ? 3'h3 : 3'h5)
              : 3'h5;
  wire [2:0] _FwRJ_T_151 = _FwRJ_T_2 ? 3'h5 : _FwRJ_T_68;
  wire       _FwRJ_T_72 = io_RJ == 5'h0;
  wire [2:0] _FwRJ_T_138 =
    _FwRJ_T_73 == 5'h0
      ? (io_ex_Sel == 2'h0
           ? 3'h0
           : {2'h2, ~({io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0 | io_ex_Sel == 2'h2)})
      : _FwRJ_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h1
               : {io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0
                   ? 3'h2
                   : io_ls_Sel == 2'h2 ? 3'h3 : 3'h5)
          : {2'h2,
             ~(_FwRJ_T_115 == 5'h0
               & (io_wb_Sel == 2'h0 | {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                  | io_wb_Sel == 2'h2))};
  wire       _FwRJ_T_150 =
    _FwRJ_T_151 == 3'h4 & (_FwRJ_T_72 ? 3'h5 : _FwRJ_T_138) == 3'h4;
  wire       _FwRJ_T_155 = _FwRJ_T_151 == 3'h4;
  wire [2:0] FwRJ_1 = _FwRJ_T_150 ? 3'h4 : _FwRJ_T_155 | _FwRJ_T_2 ? 3'h5 : _FwRJ_T_68;
  wire [2:0] FwRJ_2 = _FwRJ_T_150 ? 3'h4 : ~_FwRJ_T_155 | _FwRJ_T_72 ? 3'h5 : _FwRJ_T_138;
  wire       _FwRK_T_2 = io_RK == 5'h0;
  wire [4:0] _FwRK_T_73 = io_RK ^ io_ex_Dst;
  wire [4:0] _FwRK_T_94 = io_RK ^ io_ls_Dst;
  wire [4:0] _FwRK_T_115 = io_RK ^ io_wb_Dst;
  wire [2:0] _FwRK_T_68 =
    _FwRK_T_73 == 5'h0
      ? {2'h2,
         ~(io_ex_Sel == 2'h0 | {io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0
           | io_ex_Sel == 2'h2)}
      : _FwRK_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h0
               : {2'h2, ~({io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0 | io_ls_Sel == 2'h2)})
          : _FwRK_T_115 == 5'h0
              ? (io_wb_Sel == 2'h0
                   ? 3'h1
                   : {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                       ? 3'h2
                       : io_wb_Sel == 2'h2 ? 3'h3 : 3'h5)
              : 3'h5;
  wire [2:0] _FwRK_T_151 = _FwRK_T_2 ? 3'h5 : _FwRK_T_68;
  wire       _FwRK_T_72 = io_RK == 5'h0;
  wire [2:0] _FwRK_T_138 =
    _FwRK_T_73 == 5'h0
      ? (io_ex_Sel == 2'h0
           ? 3'h0
           : {2'h2, ~({io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0 | io_ex_Sel == 2'h2)})
      : _FwRK_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h1
               : {io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0
                   ? 3'h2
                   : io_ls_Sel == 2'h2 ? 3'h3 : 3'h5)
          : {2'h2,
             ~(_FwRK_T_115 == 5'h0
               & (io_wb_Sel == 2'h0 | {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                  | io_wb_Sel == 2'h2))};
  wire       _FwRK_T_150 =
    _FwRK_T_151 == 3'h4 & (_FwRK_T_72 ? 3'h5 : _FwRK_T_138) == 3'h4;
  wire       _FwRK_T_155 = _FwRK_T_151 == 3'h4;
  wire [2:0] FwRK_1 = _FwRK_T_150 ? 3'h4 : _FwRK_T_155 | _FwRK_T_2 ? 3'h5 : _FwRK_T_68;
  wire [2:0] FwRK_2 = _FwRK_T_150 ? 3'h4 : ~_FwRK_T_155 | _FwRK_T_72 ? 3'h5 : _FwRK_T_138;
  wire       _FwRD_T_2 = io_RD == 5'h0;
  wire [4:0] _FwRD_T_73 = io_RD ^ io_ex_Dst;
  wire [4:0] _FwRD_T_94 = io_RD ^ io_ls_Dst;
  wire [4:0] _FwRD_T_115 = io_RD ^ io_wb_Dst;
  wire [2:0] _FwRD_T_68 =
    _FwRD_T_73 == 5'h0
      ? {2'h2,
         ~(io_ex_Sel == 2'h0 | {io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0
           | io_ex_Sel == 2'h2)}
      : _FwRD_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h0
               : {2'h2, ~({io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0 | io_ls_Sel == 2'h2)})
          : _FwRD_T_115 == 5'h0
              ? (io_wb_Sel == 2'h0
                   ? 3'h1
                   : {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                       ? 3'h2
                       : io_wb_Sel == 2'h2 ? 3'h3 : 3'h5)
              : 3'h5;
  wire [2:0] _FwRD_T_151 = _FwRD_T_2 ? 3'h5 : _FwRD_T_68;
  wire       _FwRD_T_72 = io_RD == 5'h0;
  wire [2:0] _FwRD_T_138 =
    _FwRD_T_73 == 5'h0
      ? (io_ex_Sel == 2'h0
           ? 3'h0
           : {2'h2, ~({io_ex_Sel[1], ~(io_ex_Sel[0])} == 2'h0 | io_ex_Sel == 2'h2)})
      : _FwRD_T_94 == 5'h0
          ? (io_ls_Sel == 2'h0
               ? 3'h1
               : {io_ls_Sel[1], ~(io_ls_Sel[0])} == 2'h0
                   ? 3'h2
                   : io_ls_Sel == 2'h2 ? 3'h3 : 3'h5)
          : {2'h2,
             ~(_FwRD_T_115 == 5'h0
               & (io_wb_Sel == 2'h0 | {io_wb_Sel[1], ~(io_wb_Sel[0])} == 2'h0
                  | io_wb_Sel == 2'h2))};
  wire       _FwRD_T_150 =
    _FwRD_T_151 == 3'h4 & (_FwRD_T_72 ? 3'h5 : _FwRD_T_138) == 3'h4;
  wire       _FwRD_T_155 = _FwRD_T_151 == 3'h4;
  wire [2:0] FwRD_1 = _FwRD_T_150 ? 3'h4 : _FwRD_T_155 | _FwRD_T_2 ? 3'h5 : _FwRD_T_68;
  wire [2:0] FwRD_2 = _FwRD_T_150 ? 3'h4 : ~_FwRD_T_155 | _FwRD_T_72 ? 3'h5 : _FwRD_T_138;
  assign io_stall =
    FwRJ_1 == 3'h4 | FwRK_1 == 3'h4 | FwRD_1 == 3'h4 | FwRJ_2 == 3'h4 | FwRK_2 == 3'h4
    | FwRD_2 == 3'h4;
  assign io_FwID_RJ = FwRJ_1;
  assign io_FwID_RK = FwRK_1;
  assign io_FwID_RD = FwRD_1;
  assign io_FwEX_RJ = FwRJ_2;
  assign io_FwEX_RK = FwRK_2;
  assign io_FwEX_RD = FwRD_2;
endmodule

module core(
  input         clock,
                reset,
  input  [31:0] io_ifu_in_bits_data_out,
  input         io_ifu_out_ready,
  output        io_ifu_out_valid,
  output [31:0] io_ifu_out_bits_addr,
  input  [31:0] io_lsu_in_bits_data_out,
  output        io_lsu_out_valid,
                io_lsu_out_bits_data_wen,
  output [31:0] io_lsu_out_bits_data_in,
                io_lsu_out_bits_addr,
  output [3:0]  io_lsu_out_bits_be_n,
  output        io_lsu_out_bits_oe_n,
                io_lsu_out_bits_we_n
);

  wire        _forward_io_stall;
  wire [2:0]  _forward_io_FwID_RJ;
  wire [2:0]  _forward_io_FwID_RK;
  wire [2:0]  _forward_io_FwID_RD;
  wire [2:0]  _forward_io_FwEX_RJ;
  wire [2:0]  _forward_io_FwEX_RK;
  wire [2:0]  _forward_io_FwEX_RD;
  wire        _wbu_io_wen;
  wire [4:0]  _wbu_io_waddr;
  wire [31:0] _wbu_io_wdata;
  wire [4:0]  _wbu_io_wb_Dst;
  wire [1:0]  _wbu_io_wb_Sel;
  wire [31:0] _wbu_io_wb_ALU;
  wire [31:0] _wbu_io_wb_Mem;
  wire        _lsu_wbu_io_prev_ready;
  wire        _lsu_wbu_io_next_valid;
  wire [31:0] _lsu_wbu_io_next_bits_MemOut;
  wire [31:0] _lsu_wbu_io_next_bits_ALUOut;
  wire [1:0]  _lsu_wbu_io_next_bits_wbSel;
  wire [1:0]  _lsu_wbu_io_next_bits_wbDst;
  wire [4:0]  _lsu_wbu_io_next_bits_rd;
  wire        _bru_io_flush;
  wire        _bru_io_update;
  wire        _bru_io_u_branch;
  wire        _bru_io_u_type;
  wire [31:0] _bru_io_u_pc;
  wire [31:0] _bru_io_u_target;
  wire [31:0] _bru_io_nextPC;
  wire        _lsu_io_prev_ready;
  wire        _lsu_io_next_valid;
  wire [31:0] _lsu_io_next_bits_MemOut;
  wire [31:0] _lsu_io_next_bits_ALUOut;
  wire [1:0]  _lsu_io_next_bits_wbSel;
  wire [1:0]  _lsu_io_next_bits_wbDst;
  wire [4:0]  _lsu_io_next_bits_rd;
  wire        _lsu_io_stall;
  wire [4:0]  _lsu_io_ls_Dst;
  wire [1:0]  _lsu_io_ls_Sel;
  wire [31:0] _lsu_io_ls_ALU;
  wire        _exu_bru_io_next_valid;
  wire        _exu_bru_io_next_bits_Zero;
  wire        _exu_bru_io_next_bits_SLess;
  wire        _exu_bru_io_next_bits_ULess;
  wire [3:0]  _exu_bru_io_next_bits_branchOp;
  wire [31:0] _exu_bru_io_next_bits_pcadd4;
  wire [31:0] _exu_bru_io_next_bits_pcoff;
  wire [31:0] _exu_bru_io_next_bits_jirlpc;
  wire [31:0] _exu_bru_io_next_bits_pc;
  wire [31:0] _exu_bru_io_next_bits_npc;
  wire        _exu_lsu_io_prev_ready;
  wire        _exu_lsu_io_next_valid;
  wire [31:0] _exu_lsu_io_next_bits_ALUOut;
  wire [3:0]  _exu_lsu_io_next_bits_memOp;
  wire [1:0]  _exu_lsu_io_next_bits_wbSel;
  wire [1:0]  _exu_lsu_io_next_bits_wbDst;
  wire [4:0]  _exu_lsu_io_next_bits_rd;
  wire [31:0] _exu_lsu_io_next_bits_rd_data;
  wire        _exu_io_prev_ready;
  wire        _exu_io_next_valid;
  wire [31:0] _exu_io_next_bits_ALUOut;
  wire [3:0]  _exu_io_next_bits_memOp;
  wire [1:0]  _exu_io_next_bits_wbSel;
  wire [1:0]  _exu_io_next_bits_wbDst;
  wire [4:0]  _exu_io_next_bits_rd;
  wire [31:0] _exu_io_next_bits_rd_data;
  wire        _exu_io_bru_valid;
  wire        _exu_io_bru_bits_Zero;
  wire        _exu_io_bru_bits_SLess;
  wire        _exu_io_bru_bits_ULess;
  wire [3:0]  _exu_io_bru_bits_branchOp;
  wire [31:0] _exu_io_bru_bits_pcadd4;
  wire [31:0] _exu_io_bru_bits_pcoff;
  wire [31:0] _exu_io_bru_bits_jirlpc;
  wire [31:0] _exu_io_bru_bits_pc;
  wire [31:0] _exu_io_bru_bits_npc;
  wire [31:0] _exu_io_MulOut;
  wire [4:0]  _exu_io_ex_Dst;
  wire [1:0]  _exu_io_ex_Sel;
  wire        _idu_exu_io_prev_ready;
  wire        _idu_exu_io_next_valid;
  wire [3:0]  _idu_exu_io_next_bits_branchOp;
  wire [3:0]  _idu_exu_io_next_bits_aluOp;
  wire [1:0]  _idu_exu_io_next_bits_aluAsrc;
  wire [2:0]  _idu_exu_io_next_bits_aluBsrc;
  wire [3:0]  _idu_exu_io_next_bits_memOp;
  wire [1:0]  _idu_exu_io_next_bits_wbSel;
  wire [1:0]  _idu_exu_io_next_bits_wbDst;
  wire [2:0]  _idu_exu_io_next_bits_FwEX_RJ;
  wire [2:0]  _idu_exu_io_next_bits_FwEX_RK;
  wire [2:0]  _idu_exu_io_next_bits_FwEX_RD;
  wire [31:0] _idu_exu_io_next_bits_Imm;
  wire [4:0]  _idu_exu_io_next_bits_rd;
  wire [31:0] _idu_exu_io_next_bits_rd_data;
  wire [31:0] _idu_exu_io_next_bits_rj_data;
  wire [31:0] _idu_exu_io_next_bits_rk_data;
  wire [31:0] _idu_exu_io_next_bits_pc;
  wire [31:0] _idu_exu_io_next_bits_npc;
  wire        _idu_io_prev_ready;
  wire        _idu_io_next_valid;
  wire [3:0]  _idu_io_next_bits_branchOp;
  wire [3:0]  _idu_io_next_bits_aluOp;
  wire [1:0]  _idu_io_next_bits_aluAsrc;
  wire [2:0]  _idu_io_next_bits_aluBsrc;
  wire [3:0]  _idu_io_next_bits_memOp;
  wire [1:0]  _idu_io_next_bits_wbSel;
  wire [1:0]  _idu_io_next_bits_wbDst;
  wire [2:0]  _idu_io_next_bits_FwEX_RJ;
  wire [2:0]  _idu_io_next_bits_FwEX_RK;
  wire [2:0]  _idu_io_next_bits_FwEX_RD;
  wire [31:0] _idu_io_next_bits_Imm;
  wire [4:0]  _idu_io_next_bits_rd;
  wire [31:0] _idu_io_next_bits_rd_data;
  wire [31:0] _idu_io_next_bits_rj_data;
  wire [31:0] _idu_io_next_bits_rk_data;
  wire [31:0] _idu_io_next_bits_pc;
  wire [31:0] _idu_io_next_bits_npc;
  wire [4:0]  _idu_io_RJ;
  wire [4:0]  _idu_io_RK;
  wire [4:0]  _idu_io_RD;
  wire        _ifu_idu_io_prev_ready;
  wire        _ifu_idu_io_next_valid;
  wire [31:0] _ifu_idu_io_next_bits_pc;
  wire [31:0] _ifu_idu_io_next_bits_npc;
  wire [31:0] _ifu_idu_io_next_bits_inst;
  wire        _ifu_io_next_valid;
  wire [31:0] _ifu_io_next_bits_pc;
  wire [31:0] _ifu_io_next_bits_npc;
  wire [31:0] _ifu_io_next_bits_inst;
  ifu ifu (
    .clock                    (clock),
    .reset                    (reset),
    .io_base_in_bits_data_out (io_ifu_in_bits_data_out),
    .io_base_out_ready        (io_ifu_out_ready),
    .io_base_out_valid        (io_ifu_out_valid),
    .io_base_out_bits_addr    (io_ifu_out_bits_addr),
    .io_next_ready            (_ifu_idu_io_prev_ready),
    .io_next_valid            (_ifu_io_next_valid),
    .io_next_bits_pc          (_ifu_io_next_bits_pc),
    .io_next_bits_npc         (_ifu_io_next_bits_npc),
    .io_next_bits_inst        (_ifu_io_next_bits_inst),
    .io_flush                 (_bru_io_flush),
    .io_update                (_bru_io_update),
    .io_u_branch              (_bru_io_u_branch),
    .io_u_type                (_bru_io_u_type),
    .io_u_pc                  (_bru_io_u_pc),
    .io_u_target              (_bru_io_u_target),
    .io_nextPC                (_bru_io_nextPC)
  );
  buffer ifu_idu (
    .clock             (clock),
    .reset             (reset),
    .io_prev_ready     (_ifu_idu_io_prev_ready),
    .io_prev_valid     (_ifu_io_next_valid),
    .io_prev_bits_pc   (_ifu_io_next_bits_pc),
    .io_prev_bits_npc  (_ifu_io_next_bits_npc),
    .io_prev_bits_inst (_ifu_io_next_bits_inst),
    .io_next_ready     (_idu_io_prev_ready),
    .io_next_valid     (_ifu_idu_io_next_valid),
    .io_next_bits_pc   (_ifu_idu_io_next_bits_pc),
    .io_next_bits_npc  (_ifu_idu_io_next_bits_npc),
    .io_next_bits_inst (_ifu_idu_io_next_bits_inst),
    .io_stall          (_forward_io_stall | _lsu_io_stall),
    .io_flush          (_bru_io_flush)
  );
  idu idu (
    .clock                 (clock),
    .io_prev_ready         (_idu_io_prev_ready),
    .io_prev_valid         (_ifu_idu_io_next_valid),
    .io_prev_bits_pc       (_ifu_idu_io_next_bits_pc),
    .io_prev_bits_npc      (_ifu_idu_io_next_bits_npc),
    .io_prev_bits_inst     (_ifu_idu_io_next_bits_inst),
    .io_next_ready         (_idu_exu_io_prev_ready),
    .io_next_valid         (_idu_io_next_valid),
    .io_next_bits_branchOp (_idu_io_next_bits_branchOp),
    .io_next_bits_aluOp    (_idu_io_next_bits_aluOp),
    .io_next_bits_aluAsrc  (_idu_io_next_bits_aluAsrc),
    .io_next_bits_aluBsrc  (_idu_io_next_bits_aluBsrc),
    .io_next_bits_memOp    (_idu_io_next_bits_memOp),
    .io_next_bits_wbSel    (_idu_io_next_bits_wbSel),
    .io_next_bits_wbDst    (_idu_io_next_bits_wbDst),
    .io_next_bits_FwEX_RJ  (_idu_io_next_bits_FwEX_RJ),
    .io_next_bits_FwEX_RK  (_idu_io_next_bits_FwEX_RK),
    .io_next_bits_FwEX_RD  (_idu_io_next_bits_FwEX_RD),
    .io_next_bits_Imm      (_idu_io_next_bits_Imm),
    .io_next_bits_rd       (_idu_io_next_bits_rd),
    .io_next_bits_rd_data  (_idu_io_next_bits_rd_data),
    .io_next_bits_rj_data  (_idu_io_next_bits_rj_data),
    .io_next_bits_rk_data  (_idu_io_next_bits_rk_data),
    .io_next_bits_pc       (_idu_io_next_bits_pc),
    .io_next_bits_npc      (_idu_io_next_bits_npc),
    .io_stall              (_forward_io_stall),
    .io_wen                (_wbu_io_wen),
    .io_waddr              (_wbu_io_waddr),
    .io_wdata              (_wbu_io_wdata),
    .io_RJ                 (_idu_io_RJ),
    .io_RK                 (_idu_io_RK),
    .io_RD                 (_idu_io_RD),
    .io_FwID_RJ            (_forward_io_FwID_RJ),
    .io_FwID_RK            (_forward_io_FwID_RK),
    .io_FwID_RD            (_forward_io_FwID_RD),
    .io_FwEX_RJ            (_forward_io_FwEX_RJ),
    .io_FwEX_RK            (_forward_io_FwEX_RK),
    .io_FwEX_RD            (_forward_io_FwEX_RD),
    .io_ls_ALU             (_lsu_io_ls_ALU),
    .io_wb_ALU             (_wbu_io_wb_ALU),
    .io_wb_Mem             (_wbu_io_wb_Mem),
    .io_wb_Mul             (_exu_io_MulOut)
  );
  buffer_1 idu_exu (
    .clock                 (clock),
    .reset                 (reset),
    .io_prev_ready         (_idu_exu_io_prev_ready),
    .io_prev_valid         (_idu_io_next_valid),
    .io_prev_bits_branchOp (_idu_io_next_bits_branchOp),
    .io_prev_bits_aluOp    (_idu_io_next_bits_aluOp),
    .io_prev_bits_aluAsrc  (_idu_io_next_bits_aluAsrc),
    .io_prev_bits_aluBsrc  (_idu_io_next_bits_aluBsrc),
    .io_prev_bits_memOp    (_idu_io_next_bits_memOp),
    .io_prev_bits_wbSel    (_idu_io_next_bits_wbSel),
    .io_prev_bits_wbDst    (_idu_io_next_bits_wbDst),
    .io_prev_bits_FwEX_RJ  (_idu_io_next_bits_FwEX_RJ),
    .io_prev_bits_FwEX_RK  (_idu_io_next_bits_FwEX_RK),
    .io_prev_bits_FwEX_RD  (_idu_io_next_bits_FwEX_RD),
    .io_prev_bits_Imm      (_idu_io_next_bits_Imm),
    .io_prev_bits_rd       (_idu_io_next_bits_rd),
    .io_prev_bits_rd_data  (_idu_io_next_bits_rd_data),
    .io_prev_bits_rj_data  (_idu_io_next_bits_rj_data),
    .io_prev_bits_rk_data  (_idu_io_next_bits_rk_data),
    .io_prev_bits_pc       (_idu_io_next_bits_pc),
    .io_prev_bits_npc      (_idu_io_next_bits_npc),
    .io_next_ready         (_exu_io_prev_ready),
    .io_next_valid         (_idu_exu_io_next_valid),
    .io_next_bits_branchOp (_idu_exu_io_next_bits_branchOp),
    .io_next_bits_aluOp    (_idu_exu_io_next_bits_aluOp),
    .io_next_bits_aluAsrc  (_idu_exu_io_next_bits_aluAsrc),
    .io_next_bits_aluBsrc  (_idu_exu_io_next_bits_aluBsrc),
    .io_next_bits_memOp    (_idu_exu_io_next_bits_memOp),
    .io_next_bits_wbSel    (_idu_exu_io_next_bits_wbSel),
    .io_next_bits_wbDst    (_idu_exu_io_next_bits_wbDst),
    .io_next_bits_FwEX_RJ  (_idu_exu_io_next_bits_FwEX_RJ),
    .io_next_bits_FwEX_RK  (_idu_exu_io_next_bits_FwEX_RK),
    .io_next_bits_FwEX_RD  (_idu_exu_io_next_bits_FwEX_RD),
    .io_next_bits_Imm      (_idu_exu_io_next_bits_Imm),
    .io_next_bits_rd       (_idu_exu_io_next_bits_rd),
    .io_next_bits_rd_data  (_idu_exu_io_next_bits_rd_data),
    .io_next_bits_rj_data  (_idu_exu_io_next_bits_rj_data),
    .io_next_bits_rk_data  (_idu_exu_io_next_bits_rk_data),
    .io_next_bits_pc       (_idu_exu_io_next_bits_pc),
    .io_next_bits_npc      (_idu_exu_io_next_bits_npc),
    .io_stall              (_lsu_io_stall),
    .io_flush              (_bru_io_flush)
  );
  exu exu (
    .clock                 (clock),
    .io_prev_ready         (_exu_io_prev_ready),
    .io_prev_valid         (_idu_exu_io_next_valid),
    .io_prev_bits_branchOp (_idu_exu_io_next_bits_branchOp),
    .io_prev_bits_aluOp    (_idu_exu_io_next_bits_aluOp),
    .io_prev_bits_aluAsrc  (_idu_exu_io_next_bits_aluAsrc),
    .io_prev_bits_aluBsrc  (_idu_exu_io_next_bits_aluBsrc),
    .io_prev_bits_memOp    (_idu_exu_io_next_bits_memOp),
    .io_prev_bits_wbSel    (_idu_exu_io_next_bits_wbSel),
    .io_prev_bits_wbDst    (_idu_exu_io_next_bits_wbDst),
    .io_prev_bits_FwEX_RJ  (_idu_exu_io_next_bits_FwEX_RJ),
    .io_prev_bits_FwEX_RK  (_idu_exu_io_next_bits_FwEX_RK),
    .io_prev_bits_FwEX_RD  (_idu_exu_io_next_bits_FwEX_RD),
    .io_prev_bits_Imm      (_idu_exu_io_next_bits_Imm),
    .io_prev_bits_rd       (_idu_exu_io_next_bits_rd),
    .io_prev_bits_rd_data  (_idu_exu_io_next_bits_rd_data),
    .io_prev_bits_rj_data  (_idu_exu_io_next_bits_rj_data),
    .io_prev_bits_rk_data  (_idu_exu_io_next_bits_rk_data),
    .io_prev_bits_pc       (_idu_exu_io_next_bits_pc),
    .io_prev_bits_npc      (_idu_exu_io_next_bits_npc),
    .io_next_ready         (_exu_lsu_io_prev_ready),
    .io_next_valid         (_exu_io_next_valid),
    .io_next_bits_ALUOut   (_exu_io_next_bits_ALUOut),
    .io_next_bits_memOp    (_exu_io_next_bits_memOp),
    .io_next_bits_wbSel    (_exu_io_next_bits_wbSel),
    .io_next_bits_wbDst    (_exu_io_next_bits_wbDst),
    .io_next_bits_rd       (_exu_io_next_bits_rd),
    .io_next_bits_rd_data  (_exu_io_next_bits_rd_data),
    .io_bru_valid          (_exu_io_bru_valid),
    .io_bru_bits_Zero      (_exu_io_bru_bits_Zero),
    .io_bru_bits_SLess     (_exu_io_bru_bits_SLess),
    .io_bru_bits_ULess     (_exu_io_bru_bits_ULess),
    .io_bru_bits_branchOp  (_exu_io_bru_bits_branchOp),
    .io_bru_bits_pcadd4    (_exu_io_bru_bits_pcadd4),
    .io_bru_bits_pcoff     (_exu_io_bru_bits_pcoff),
    .io_bru_bits_jirlpc    (_exu_io_bru_bits_jirlpc),
    .io_bru_bits_pc        (_exu_io_bru_bits_pc),
    .io_bru_bits_npc       (_exu_io_bru_bits_npc),
    .io_stall              (_lsu_io_stall),
    .io_MulOut             (_exu_io_MulOut),
    .io_ex_Dst             (_exu_io_ex_Dst),
    .io_ex_Sel             (_exu_io_ex_Sel),
    .io_ls_ALU             (_lsu_io_ls_ALU),
    .io_wb_ALU             (_wbu_io_wb_ALU),
    .io_wb_Mem             (_wbu_io_wb_Mem)
  );
  buffer_2 exu_lsu (
    .clock                (clock),
    .reset                (reset),
    .io_prev_ready        (_exu_lsu_io_prev_ready),
    .io_prev_valid        (_exu_io_next_valid),
    .io_prev_bits_ALUOut  (_exu_io_next_bits_ALUOut),
    .io_prev_bits_memOp   (_exu_io_next_bits_memOp),
    .io_prev_bits_wbSel   (_exu_io_next_bits_wbSel),
    .io_prev_bits_wbDst   (_exu_io_next_bits_wbDst),
    .io_prev_bits_rd      (_exu_io_next_bits_rd),
    .io_prev_bits_rd_data (_exu_io_next_bits_rd_data),
    .io_next_ready        (_lsu_io_prev_ready),
    .io_next_valid        (_exu_lsu_io_next_valid),
    .io_next_bits_ALUOut  (_exu_lsu_io_next_bits_ALUOut),
    .io_next_bits_memOp   (_exu_lsu_io_next_bits_memOp),
    .io_next_bits_wbSel   (_exu_lsu_io_next_bits_wbSel),
    .io_next_bits_wbDst   (_exu_lsu_io_next_bits_wbDst),
    .io_next_bits_rd      (_exu_lsu_io_next_bits_rd),
    .io_next_bits_rd_data (_exu_lsu_io_next_bits_rd_data),
    .io_stall             (_lsu_io_stall),
    .io_flush             (_bru_io_flush)
  );
  buffer_3 exu_bru (
    .clock                 (clock),
    .reset                 (reset),
    .io_prev_valid         (_exu_io_bru_valid),
    .io_prev_bits_Zero     (_exu_io_bru_bits_Zero),
    .io_prev_bits_SLess    (_exu_io_bru_bits_SLess),
    .io_prev_bits_ULess    (_exu_io_bru_bits_ULess),
    .io_prev_bits_branchOp (_exu_io_bru_bits_branchOp),
    .io_prev_bits_pcadd4   (_exu_io_bru_bits_pcadd4),
    .io_prev_bits_pcoff    (_exu_io_bru_bits_pcoff),
    .io_prev_bits_jirlpc   (_exu_io_bru_bits_jirlpc),
    .io_prev_bits_pc       (_exu_io_bru_bits_pc),
    .io_prev_bits_npc      (_exu_io_bru_bits_npc),
    .io_next_valid         (_exu_bru_io_next_valid),
    .io_next_bits_Zero     (_exu_bru_io_next_bits_Zero),
    .io_next_bits_SLess    (_exu_bru_io_next_bits_SLess),
    .io_next_bits_ULess    (_exu_bru_io_next_bits_ULess),
    .io_next_bits_branchOp (_exu_bru_io_next_bits_branchOp),
    .io_next_bits_pcadd4   (_exu_bru_io_next_bits_pcadd4),
    .io_next_bits_pcoff    (_exu_bru_io_next_bits_pcoff),
    .io_next_bits_jirlpc   (_exu_bru_io_next_bits_jirlpc),
    .io_next_bits_pc       (_exu_bru_io_next_bits_pc),
    .io_next_bits_npc      (_exu_bru_io_next_bits_npc),
    .io_stall              (_lsu_io_stall),
    .io_flush              (_bru_io_flush)
  );
  lsu lsu (
    .clock                    (clock),
    .reset                    (reset),
    .io_ext_in_bits_data_out  (io_lsu_in_bits_data_out),
    .io_ext_out_valid         (io_lsu_out_valid),
    .io_ext_out_bits_data_wen (io_lsu_out_bits_data_wen),
    .io_ext_out_bits_data_in  (io_lsu_out_bits_data_in),
    .io_ext_out_bits_addr     (io_lsu_out_bits_addr),
    .io_ext_out_bits_be_n     (io_lsu_out_bits_be_n),
    .io_ext_out_bits_oe_n     (io_lsu_out_bits_oe_n),
    .io_ext_out_bits_we_n     (io_lsu_out_bits_we_n),
    .io_prev_ready            (_lsu_io_prev_ready),
    .io_prev_valid            (_exu_lsu_io_next_valid),
    .io_prev_bits_ALUOut      (_exu_lsu_io_next_bits_ALUOut),
    .io_prev_bits_memOp       (_exu_lsu_io_next_bits_memOp),
    .io_prev_bits_wbSel       (_exu_lsu_io_next_bits_wbSel),
    .io_prev_bits_wbDst       (_exu_lsu_io_next_bits_wbDst),
    .io_prev_bits_rd          (_exu_lsu_io_next_bits_rd),
    .io_prev_bits_rd_data     (_exu_lsu_io_next_bits_rd_data),
    .io_next_ready            (_lsu_wbu_io_prev_ready),
    .io_next_valid            (_lsu_io_next_valid),
    .io_next_bits_MemOut      (_lsu_io_next_bits_MemOut),
    .io_next_bits_ALUOut      (_lsu_io_next_bits_ALUOut),
    .io_next_bits_wbSel       (_lsu_io_next_bits_wbSel),
    .io_next_bits_wbDst       (_lsu_io_next_bits_wbDst),
    .io_next_bits_rd          (_lsu_io_next_bits_rd),
    .io_stall                 (_lsu_io_stall),
    .io_ls_Dst                (_lsu_io_ls_Dst),
    .io_ls_Sel                (_lsu_io_ls_Sel),
    .io_ls_ALU                (_lsu_io_ls_ALU)
  );
  bru bru (
    .io_prev_valid         (_exu_bru_io_next_valid),
    .io_prev_bits_Zero     (_exu_bru_io_next_bits_Zero),
    .io_prev_bits_SLess    (_exu_bru_io_next_bits_SLess),
    .io_prev_bits_ULess    (_exu_bru_io_next_bits_ULess),
    .io_prev_bits_branchOp (_exu_bru_io_next_bits_branchOp),
    .io_prev_bits_pcadd4   (_exu_bru_io_next_bits_pcadd4),
    .io_prev_bits_pcoff    (_exu_bru_io_next_bits_pcoff),
    .io_prev_bits_jirlpc   (_exu_bru_io_next_bits_jirlpc),
    .io_prev_bits_pc       (_exu_bru_io_next_bits_pc),
    .io_prev_bits_npc      (_exu_bru_io_next_bits_npc),
    .io_stall              (_lsu_io_stall),
    .io_flush              (_bru_io_flush),
    .io_update             (_bru_io_update),
    .io_u_branch           (_bru_io_u_branch),
    .io_u_type             (_bru_io_u_type),
    .io_u_pc               (_bru_io_u_pc),
    .io_u_target           (_bru_io_u_target),
    .io_nextPC             (_bru_io_nextPC)
  );
  buffer_4 lsu_wbu (
    .clock               (clock),
    .reset               (reset),
    .io_prev_ready       (_lsu_wbu_io_prev_ready),
    .io_prev_valid       (_lsu_io_next_valid),
    .io_prev_bits_MemOut (_lsu_io_next_bits_MemOut),
    .io_prev_bits_ALUOut (_lsu_io_next_bits_ALUOut),
    .io_prev_bits_wbSel  (_lsu_io_next_bits_wbSel),
    .io_prev_bits_wbDst  (_lsu_io_next_bits_wbDst),
    .io_prev_bits_rd     (_lsu_io_next_bits_rd),
    .io_next_valid       (_lsu_wbu_io_next_valid),
    .io_next_bits_MemOut (_lsu_wbu_io_next_bits_MemOut),
    .io_next_bits_ALUOut (_lsu_wbu_io_next_bits_ALUOut),
    .io_next_bits_wbSel  (_lsu_wbu_io_next_bits_wbSel),
    .io_next_bits_wbDst  (_lsu_wbu_io_next_bits_wbDst),
    .io_next_bits_rd     (_lsu_wbu_io_next_bits_rd),
    .io_stall            (_lsu_io_stall)
  );
  wbu wbu (
    .io_prev_valid       (_lsu_wbu_io_next_valid),
    .io_prev_bits_MemOut (_lsu_wbu_io_next_bits_MemOut),
    .io_prev_bits_ALUOut (_lsu_wbu_io_next_bits_ALUOut),
    .io_prev_bits_wbSel  (_lsu_wbu_io_next_bits_wbSel),
    .io_prev_bits_wbDst  (_lsu_wbu_io_next_bits_wbDst),
    .io_prev_bits_rd     (_lsu_wbu_io_next_bits_rd),
    .io_wen              (_wbu_io_wen),
    .io_waddr            (_wbu_io_waddr),
    .io_wdata            (_wbu_io_wdata),
    .io_stall            (_lsu_io_stall),
    .io_MulOut           (_exu_io_MulOut),
    .io_wb_Dst           (_wbu_io_wb_Dst),
    .io_wb_Sel           (_wbu_io_wb_Sel),
    .io_wb_ALU           (_wbu_io_wb_ALU),
    .io_wb_Mem           (_wbu_io_wb_Mem)
  );
  forward forward (
    .io_RJ      (_idu_io_RJ),
    .io_RK      (_idu_io_RK),
    .io_RD      (_idu_io_RD),
    .io_ex_Dst  (_exu_io_ex_Dst),
    .io_ls_Dst  (_lsu_io_ls_Dst),
    .io_wb_Dst  (_wbu_io_wb_Dst),
    .io_ex_Sel  (_exu_io_ex_Sel),
    .io_ls_Sel  (_lsu_io_ls_Sel),
    .io_wb_Sel  (_wbu_io_wb_Sel),
    .io_stall   (_forward_io_stall),
    .io_FwID_RJ (_forward_io_FwID_RJ),
    .io_FwID_RK (_forward_io_FwID_RK),
    .io_FwID_RD (_forward_io_FwID_RD),
    .io_FwEX_RJ (_forward_io_FwEX_RJ),
    .io_FwEX_RK (_forward_io_FwEX_RK),
    .io_FwEX_RD (_forward_io_FwEX_RD)
  );
endmodule

module sram_ctrl(
  input         io_in_valid,
                io_in_bits_data_wen,
  input  [31:0] io_in_bits_data_in,
                io_in_bits_addr,
  input  [3:0]  io_in_bits_be_n,
  input         io_in_bits_oe_n,
                io_in_bits_we_n,
  output [31:0] io_out_bits_data_out,
  output        io_sram_data_wen,
  output [31:0] io_sram_data_in,
  input  [31:0] io_sram_data_out,
  output [19:0] io_sram_addr,
  output [3:0]  io_sram_be_n,
  output        io_sram_ce_n,
                io_sram_oe_n,
                io_sram_we_n
);

  assign io_out_bits_data_out = io_in_valid ? io_sram_data_out : 32'h0;
  assign io_sram_data_wen = io_in_valid & io_in_bits_data_wen;
  assign io_sram_data_in = io_in_valid ? io_in_bits_data_in : 32'h0;
  assign io_sram_addr = io_in_valid ? io_in_bits_addr[21:2] : 20'h0;
  assign io_sram_be_n = io_in_valid ? io_in_bits_be_n : 4'h0;
  assign io_sram_ce_n = ~io_in_valid;
  assign io_sram_oe_n = ~io_in_valid | io_in_bits_oe_n;
  assign io_sram_we_n = ~io_in_valid | io_in_bits_we_n;
endmodule

// external module async_transmitter

// external module async_receiver

// VCS coverage exclude_file
module ram_4x8(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data
);

  reg [7:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

module Queue4_UInt8(
  input        clock,
               reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [7:0] io_enq_bits,
  input        io_deq_ready,
  output       io_deq_valid,
  output [7:0] io_deq_bits
);

  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_4x8 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module uart_ctrl(
  input         clock,
                reset,
                io_in_valid,
  input  [31:0] io_in_bits_data_in,
                io_in_bits_addr,
  input         io_in_bits_oe_n,
                io_in_bits_we_n,
  output [31:0] io_out_bits_data_out,
  input         io_uart_rx,
  output        io_uart_tx
);

  wire       _recv_fifo_io_enq_ready;
  wire       _recv_fifo_io_deq_valid;
  wire [7:0] _recv_fifo_io_deq_bits;
  wire       _tran_fifo_io_enq_ready;
  wire       _tran_fifo_io_deq_valid;
  wire [7:0] _tran_fifo_io_deq_bits;
  wire       _recv_RxD_data_ready;
  wire [7:0] _recv_RxD_data;
  wire       _tran_TxD_busy;
  reg  [1:0] state;
  reg  [7:0] tx_data_buf;
  reg        tx_addr_buf;
  reg        uart_rd_buf;
  wire       _tran_io_TxD_start_T_1 = ~_tran_TxD_busy & _tran_fifo_io_deq_valid;
  wire       _GEN = state == 2'h2 & ~tx_addr_buf;
  always @(posedge clock) begin
    if (reset)
      state <= 2'h0;
    else if (state == 2'h2)
      state <= {1'h0, io_in_valid};
    else if (state == 2'h1)
      state <= {io_in_valid, 1'h0};
    else
      state <= {1'h0, state == 2'h0 & io_in_valid};
    tx_data_buf <= io_in_bits_data_in[7:0];
    tx_addr_buf <= io_in_bits_addr[2];
    uart_rd_buf <= io_in_bits_we_n & ~io_in_bits_oe_n;
  end // always @(posedge)
  async_transmitter #(
    .Baud(9600),
    .ClkFrequency(113000000)
  ) tran_0 (
    .clk       (clock),
    .TxD_start (_tran_io_TxD_start_T_1),
    .TxD_data  (_tran_fifo_io_deq_bits),
    .TxD       (io_uart_tx),
    .TxD_busy  (_tran_TxD_busy)
  );
  async_receiver #(
    .Baud(9600),
    .ClkFrequency(113000000)
  ) recv (
    .clk            (clock),
    .RxD            (io_uart_rx),
    .RxD_data_ready (_recv_RxD_data_ready),
    .RxD_clear      (_recv_RxD_data_ready & _recv_fifo_io_enq_ready),
    .RxD_data       (_recv_RxD_data)
  );
  Queue4_UInt8 tran_fifo (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_tran_fifo_io_enq_ready),
    .io_enq_valid (_GEN & ~uart_rd_buf & _tran_fifo_io_enq_ready),
    .io_enq_bits  (tx_data_buf),
    .io_deq_ready (_tran_io_TxD_start_T_1),
    .io_deq_valid (_tran_fifo_io_deq_valid),
    .io_deq_bits  (_tran_fifo_io_deq_bits)
  );
  Queue4_UInt8 recv_fifo (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_recv_fifo_io_enq_ready),
    .io_enq_valid (_recv_RxD_data_ready),
    .io_enq_bits  (_recv_RxD_data),
    .io_deq_ready (_GEN & uart_rd_buf & _recv_fifo_io_deq_valid),
    .io_deq_valid (_recv_fifo_io_deq_valid),
    .io_deq_bits  (_recv_fifo_io_deq_bits)
  );
  assign io_out_bits_data_out =
    io_in_bits_addr[2]
      ? {30'h0, _recv_fifo_io_deq_valid, _tran_fifo_io_enq_ready}
      : {24'h0, _recv_fifo_io_deq_bits};
endmodule

module subtop(
  input         clock,
                reset,
  output        io_base_data_wen,
  output [31:0] io_base_data_in,
  input  [31:0] io_base_data_out,
  output [19:0] io_base_addr,
  output [3:0]  io_base_be_n,
  output        io_base_ce_n,
                io_base_oe_n,
                io_base_we_n,
                io_ext_data_wen,
  output [31:0] io_ext_data_in,
  input  [31:0] io_ext_data_out,
  output [19:0] io_ext_addr,
  output [3:0]  io_ext_be_n,
  output        io_ext_ce_n,
                io_ext_oe_n,
                io_ext_we_n,
  input         io_uart_rx,
  output        io_uart_tx
);

  wire [31:0] _uart_ctrl_io_out_bits_data_out;
  wire [31:0] _ext_ram_ctrl_io_out_bits_data_out;
  wire [31:0] _base_ram_ctrl_io_out_bits_data_out;
  wire        _core_io_ifu_out_valid;
  wire [31:0] _core_io_ifu_out_bits_addr;
  wire        _core_io_lsu_out_valid;
  wire        _core_io_lsu_out_bits_data_wen;
  wire [31:0] _core_io_lsu_out_bits_data_in;
  wire [31:0] _core_io_lsu_out_bits_addr;
  wire [3:0]  _core_io_lsu_out_bits_be_n;
  wire        _core_io_lsu_out_bits_oe_n;
  wire        _core_io_lsu_out_bits_we_n;
  wire        _GEN =
    _core_io_lsu_out_valid & _core_io_lsu_out_bits_addr[31]
    & _core_io_lsu_out_bits_addr < 32'h80400000;
  wire        _GEN_0 =
    _core_io_lsu_out_valid & _core_io_lsu_out_bits_addr > 32'h803FFFFF
    & _core_io_lsu_out_bits_addr < 32'h80800000;
  core core (
    .clock                    (clock),
    .reset                    (reset),
    .io_ifu_in_bits_data_out  (_base_ram_ctrl_io_out_bits_data_out),
    .io_ifu_out_ready         (~_GEN),
    .io_ifu_out_valid         (_core_io_ifu_out_valid),
    .io_ifu_out_bits_addr     (_core_io_ifu_out_bits_addr),
    .io_lsu_in_bits_data_out
      (_GEN
         ? _base_ram_ctrl_io_out_bits_data_out
         : _GEN_0 ? _ext_ram_ctrl_io_out_bits_data_out : _uart_ctrl_io_out_bits_data_out),
    .io_lsu_out_valid         (_core_io_lsu_out_valid),
    .io_lsu_out_bits_data_wen (_core_io_lsu_out_bits_data_wen),
    .io_lsu_out_bits_data_in  (_core_io_lsu_out_bits_data_in),
    .io_lsu_out_bits_addr     (_core_io_lsu_out_bits_addr),
    .io_lsu_out_bits_be_n     (_core_io_lsu_out_bits_be_n),
    .io_lsu_out_bits_oe_n     (_core_io_lsu_out_bits_oe_n),
    .io_lsu_out_bits_we_n     (_core_io_lsu_out_bits_we_n)
  );
  sram_ctrl base_ram_ctrl (
    .io_in_valid          (_GEN ? _core_io_lsu_out_valid : _core_io_ifu_out_valid),
    .io_in_bits_data_wen  (_GEN & _core_io_lsu_out_bits_data_wen),
    .io_in_bits_data_in   (_GEN ? _core_io_lsu_out_bits_data_in : 32'h0),
    .io_in_bits_addr
      (_GEN ? _core_io_lsu_out_bits_addr : _core_io_ifu_out_bits_addr),
    .io_in_bits_be_n      (_GEN ? _core_io_lsu_out_bits_be_n : 4'h0),
    .io_in_bits_oe_n      (_GEN & _core_io_lsu_out_bits_oe_n),
    .io_in_bits_we_n      (~_GEN | _core_io_lsu_out_bits_we_n),
    .io_out_bits_data_out (_base_ram_ctrl_io_out_bits_data_out),
    .io_sram_data_wen     (io_base_data_wen),
    .io_sram_data_in      (io_base_data_in),
    .io_sram_data_out     (io_base_data_out),
    .io_sram_addr         (io_base_addr),
    .io_sram_be_n         (io_base_be_n),
    .io_sram_ce_n         (io_base_ce_n),
    .io_sram_oe_n         (io_base_oe_n),
    .io_sram_we_n         (io_base_we_n)
  );
  sram_ctrl ext_ram_ctrl (
    .io_in_valid          (_GEN_0 & _core_io_lsu_out_valid),
    .io_in_bits_data_wen  (_core_io_lsu_out_bits_data_wen),
    .io_in_bits_data_in   (_core_io_lsu_out_bits_data_in),
    .io_in_bits_addr      (_core_io_lsu_out_bits_addr),
    .io_in_bits_be_n      (_core_io_lsu_out_bits_be_n),
    .io_in_bits_oe_n      (_core_io_lsu_out_bits_oe_n),
    .io_in_bits_we_n      (_core_io_lsu_out_bits_we_n),
    .io_out_bits_data_out (_ext_ram_ctrl_io_out_bits_data_out),
    .io_sram_data_wen     (io_ext_data_wen),
    .io_sram_data_in      (io_ext_data_in),
    .io_sram_data_out     (io_ext_data_out),
    .io_sram_addr         (io_ext_addr),
    .io_sram_be_n         (io_ext_be_n),
    .io_sram_ce_n         (io_ext_ce_n),
    .io_sram_oe_n         (io_ext_oe_n),
    .io_sram_we_n         (io_ext_we_n)
  );
  uart_ctrl uart_ctrl (
    .clock                (clock),
    .reset                (reset),
    .io_in_valid
      (_core_io_lsu_out_valid & _core_io_lsu_out_bits_addr > 32'hBFD003F7
       & _core_io_lsu_out_bits_addr < 32'hBFD003FD),
    .io_in_bits_data_in   (_core_io_lsu_out_bits_data_in),
    .io_in_bits_addr      (_core_io_lsu_out_bits_addr),
    .io_in_bits_oe_n      (_core_io_lsu_out_bits_oe_n),
    .io_in_bits_we_n      (_core_io_lsu_out_bits_we_n),
    .io_out_bits_data_out (_uart_ctrl_io_out_bits_data_out),
    .io_uart_rx           (io_uart_rx),
    .io_uart_tx           (io_uart_tx)
  );
endmodule

